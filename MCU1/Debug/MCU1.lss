
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002aac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00002aac  00002b40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800070  00800070  00002b50  2**0
                  ALLOC
  3 .stab         00002544  00000000  00000000  00002b50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fce  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006062  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000061a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006312  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008e46  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a7af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 cd 12 	jmp	0x259a	; 0x259a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 37       	cpi	r26, 0x73	; 115
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c8 06 	call	0xd90	; 0xd90 <main>
      8a:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 49 15 	jmp	0x2a92	; 0x2a92 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUZZER_init>:

#include"buzzer.h"
#include"gpio.h"

void BUZZER_init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	64 e0       	ldi	r22, 0x04	; 4
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_setupPinDirection>
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <BUZZER_on>:
void BUZZER_on()
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	64 e0       	ldi	r22, 0x04	; 4
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_writePin>
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <BUZZER_off>:

void BUZZER_off()
{
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	64 e0       	ldi	r22, 0x04	; 4
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_writePin>
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <DcMotor_init>:

 */


void DcMotor_init(void)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DcMotor_Port,DcMotor_IN1,PIN_OUTPUT);
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	63 e0       	ldi	r22, 0x03	; 3
     b9a:	41 e0       	ldi	r20, 0x01	; 1
     b9c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DcMotor_Port,DcMotor_IN2,PIN_OUTPUT);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	64 e0       	ldi	r22, 0x04	; 4
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DcMotor_Port,DcMotor_Enable,PIN_OUTPUT);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	65 e0       	ldi	r22, 0x05	; 5
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <GPIO_setupPinDirection>
	GPIO_writePin(DcMotor_Port,DcMotor_IN1,LOGIC_LOW);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	63 e0       	ldi	r22, 0x03	; 3
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_writePin>
	GPIO_writePin(DcMotor_Port,DcMotor_IN2,LOGIC_LOW);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	64 e0       	ldi	r22, 0x04	; 4
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_writePin>

}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <DcMotor_Rotate>:
 Arg1:direction --->enum with three motor states in it
 Arg2:speed -----> duty cycle in xx%
 */

void DcMotor_Rotate(uint8 direction)
{
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	89 83       	std	Y+1, r24	; 0x01
	/*the condition checks the input of the function and sets the duty cycle and the direction	*/
	if(direction==CW)
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	81 30       	cpi	r24, 0x01	; 1
     bde:	79 f4       	brne	.+30     	; 0xbfe <DcMotor_Rotate+0x30>
	{
	GPIO_writePin(DcMotor_Port,DcMotor_IN2,LOGIC_HIGH);
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	64 e0       	ldi	r22, 0x04	; 4
     be4:	41 e0       	ldi	r20, 0x01	; 1
     be6:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_writePin>
	GPIO_writePin(DcMotor_Port,DcMotor_IN1,LOGIC_LOW);
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	63 e0       	ldi	r22, 0x03	; 3
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_writePin>
	GPIO_writePin(DcMotor_Port,DcMotor_Enable,LOGIC_HIGH);
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	65 e0       	ldi	r22, 0x05	; 5
     bf8:	41 e0       	ldi	r20, 0x01	; 1
     bfa:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_writePin>
	}

	if(direction==CCW)
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	82 30       	cpi	r24, 0x02	; 2
     c02:	79 f4       	brne	.+30     	; 0xc22 <DcMotor_Rotate+0x54>
	{
	GPIO_writePin(DcMotor_Port,DcMotor_IN1,LOGIC_HIGH);
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	63 e0       	ldi	r22, 0x03	; 3
     c08:	41 e0       	ldi	r20, 0x01	; 1
     c0a:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_writePin>
	GPIO_writePin(DcMotor_Port,DcMotor_IN2,LOGIC_LOW);
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	64 e0       	ldi	r22, 0x04	; 4
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_writePin>
	GPIO_writePin(DcMotor_Port,DcMotor_Enable,LOGIC_HIGH);
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	65 e0       	ldi	r22, 0x05	; 5
     c1c:	41 e0       	ldi	r20, 0x01	; 1
     c1e:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_writePin>
	}
	if(direction==STOP)
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	88 23       	and	r24, r24
     c26:	79 f4       	brne	.+30     	; 0xc46 <DcMotor_Rotate+0x78>
	{
	GPIO_writePin(DcMotor_Port,DcMotor_IN2,LOGIC_LOW);
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	64 e0       	ldi	r22, 0x04	; 4
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_writePin>
	GPIO_writePin(DcMotor_Port,DcMotor_IN1,LOGIC_LOW);
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	63 e0       	ldi	r22, 0x03	; 3
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_writePin>
	GPIO_writePin(DcMotor_Port,DcMotor_Enable,LOGIC_LOW);
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	65 e0       	ldi	r22, 0x05	; 5
     c40:	40 e0       	ldi	r20, 0x00	; 0
     c42:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_writePin>
	}
}
     c46:	0f 90       	pop	r0
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	00 d0       	rcall	.+0      	; 0xc54 <EEPROM_writeByte+0x6>
     c54:	00 d0       	rcall	.+0      	; 0xc56 <EEPROM_writeByte+0x8>
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	9a 83       	std	Y+2, r25	; 0x02
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c60:	0e 94 9d 13 	call	0x273a	; 0x273a <TWI_start>
    if (TWI_getStatus() != TWI_START)
     c64:	0e 94 f5 13 	call	0x27ea	; 0x27ea <TWI_getStatus>
     c68:	88 30       	cpi	r24, 0x08	; 8
     c6a:	11 f0       	breq	.+4      	; 0xc70 <EEPROM_writeByte+0x22>
        return ERROR;
     c6c:	1c 82       	std	Y+4, r1	; 0x04
     c6e:	28 c0       	rjmp	.+80     	; 0xcc0 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	9a 81       	ldd	r25, Y+2	; 0x02
     c74:	80 70       	andi	r24, 0x00	; 0
     c76:	97 70       	andi	r25, 0x07	; 7
     c78:	88 0f       	add	r24, r24
     c7a:	89 2f       	mov	r24, r25
     c7c:	88 1f       	adc	r24, r24
     c7e:	99 0b       	sbc	r25, r25
     c80:	91 95       	neg	r25
     c82:	80 6a       	ori	r24, 0xA0	; 160
     c84:	0e 94 b8 13 	call	0x2770	; 0x2770 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     c88:	0e 94 f5 13 	call	0x27ea	; 0x27ea <TWI_getStatus>
     c8c:	88 31       	cpi	r24, 0x18	; 24
     c8e:	11 f0       	breq	.+4      	; 0xc94 <EEPROM_writeByte+0x46>
        return ERROR; 
     c90:	1c 82       	std	Y+4, r1	; 0x04
     c92:	16 c0       	rjmp	.+44     	; 0xcc0 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	0e 94 b8 13 	call	0x2770	; 0x2770 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c9a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <TWI_getStatus>
     c9e:	88 32       	cpi	r24, 0x28	; 40
     ca0:	11 f0       	breq	.+4      	; 0xca6 <EEPROM_writeByte+0x58>
        return ERROR;
     ca2:	1c 82       	std	Y+4, r1	; 0x04
     ca4:	0d c0       	rjmp	.+26     	; 0xcc0 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	0e 94 b8 13 	call	0x2770	; 0x2770 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     cac:	0e 94 f5 13 	call	0x27ea	; 0x27ea <TWI_getStatus>
     cb0:	88 32       	cpi	r24, 0x28	; 40
     cb2:	11 f0       	breq	.+4      	; 0xcb8 <EEPROM_writeByte+0x6a>
        return ERROR;
     cb4:	1c 82       	std	Y+4, r1	; 0x04
     cb6:	04 c0       	rjmp	.+8      	; 0xcc0 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     cb8:	0e 94 ad 13 	call	0x275a	; 0x275a <TWI_stop>
	
    return SUCCESS;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	8c 83       	std	Y+4, r24	; 0x04
     cc0:	8c 81       	ldd	r24, Y+4	; 0x04
}
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <EEPROM_readByte+0x6>
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <EEPROM_readByte+0x8>
     cd8:	0f 92       	push	r0
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	9a 83       	std	Y+2, r25	; 0x02
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	7c 83       	std	Y+4, r23	; 0x04
     ce4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     ce6:	0e 94 9d 13 	call	0x273a	; 0x273a <TWI_start>
    if (TWI_getStatus() != TWI_START)
     cea:	0e 94 f5 13 	call	0x27ea	; 0x27ea <TWI_getStatus>
     cee:	88 30       	cpi	r24, 0x08	; 8
     cf0:	11 f0       	breq	.+4      	; 0xcf6 <EEPROM_readByte+0x26>
        return ERROR;
     cf2:	1d 82       	std	Y+5, r1	; 0x05
     cf4:	44 c0       	rjmp	.+136    	; 0xd7e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	80 70       	andi	r24, 0x00	; 0
     cfc:	97 70       	andi	r25, 0x07	; 7
     cfe:	88 0f       	add	r24, r24
     d00:	89 2f       	mov	r24, r25
     d02:	88 1f       	adc	r24, r24
     d04:	99 0b       	sbc	r25, r25
     d06:	91 95       	neg	r25
     d08:	80 6a       	ori	r24, 0xA0	; 160
     d0a:	0e 94 b8 13 	call	0x2770	; 0x2770 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     d0e:	0e 94 f5 13 	call	0x27ea	; 0x27ea <TWI_getStatus>
     d12:	88 31       	cpi	r24, 0x18	; 24
     d14:	11 f0       	breq	.+4      	; 0xd1a <EEPROM_readByte+0x4a>
        return ERROR;
     d16:	1d 82       	std	Y+5, r1	; 0x05
     d18:	32 c0       	rjmp	.+100    	; 0xd7e <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	0e 94 b8 13 	call	0x2770	; 0x2770 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     d20:	0e 94 f5 13 	call	0x27ea	; 0x27ea <TWI_getStatus>
     d24:	88 32       	cpi	r24, 0x28	; 40
     d26:	11 f0       	breq	.+4      	; 0xd2c <EEPROM_readByte+0x5c>
        return ERROR;
     d28:	1d 82       	std	Y+5, r1	; 0x05
     d2a:	29 c0       	rjmp	.+82     	; 0xd7e <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     d2c:	0e 94 9d 13 	call	0x273a	; 0x273a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     d30:	0e 94 f5 13 	call	0x27ea	; 0x27ea <TWI_getStatus>
     d34:	80 31       	cpi	r24, 0x10	; 16
     d36:	11 f0       	breq	.+4      	; 0xd3c <EEPROM_readByte+0x6c>
        return ERROR;
     d38:	1d 82       	std	Y+5, r1	; 0x05
     d3a:	21 c0       	rjmp	.+66     	; 0xd7e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	9a 81       	ldd	r25, Y+2	; 0x02
     d40:	80 70       	andi	r24, 0x00	; 0
     d42:	97 70       	andi	r25, 0x07	; 7
     d44:	88 0f       	add	r24, r24
     d46:	89 2f       	mov	r24, r25
     d48:	88 1f       	adc	r24, r24
     d4a:	99 0b       	sbc	r25, r25
     d4c:	91 95       	neg	r25
     d4e:	81 6a       	ori	r24, 0xA1	; 161
     d50:	0e 94 b8 13 	call	0x2770	; 0x2770 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     d54:	0e 94 f5 13 	call	0x27ea	; 0x27ea <TWI_getStatus>
     d58:	80 34       	cpi	r24, 0x40	; 64
     d5a:	11 f0       	breq	.+4      	; 0xd60 <EEPROM_readByte+0x90>
        return ERROR;
     d5c:	1d 82       	std	Y+5, r1	; 0x05
     d5e:	0f c0       	rjmp	.+30     	; 0xd7e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     d60:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <TWI_readByteWithNACK>
     d64:	eb 81       	ldd	r30, Y+3	; 0x03
     d66:	fc 81       	ldd	r31, Y+4	; 0x04
     d68:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     d6a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <TWI_getStatus>
     d6e:	88 35       	cpi	r24, 0x58	; 88
     d70:	11 f0       	breq	.+4      	; 0xd76 <EEPROM_readByte+0xa6>
        return ERROR;
     d72:	1d 82       	std	Y+5, r1	; 0x05
     d74:	04 c0       	rjmp	.+8      	; 0xd7e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     d76:	0e 94 ad 13 	call	0x275a	; 0x275a <TWI_stop>

    return SUCCESS;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	8d 83       	std	Y+5, r24	; 0x05
     d7e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <main>:




int main()
{
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	df 93       	push	r29
     d96:	cf 93       	push	r28
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	cd 5b       	subi	r28, 0xBD	; 189
     d9e:	d0 40       	sbci	r29, 0x00	; 0
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0;
     daa:	fe 01       	movw	r30, r28
     dac:	e4 56       	subi	r30, 0x64	; 100
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	10 82       	st	Z, r1
	uint8 password[8];
	uint8 password_check[8];
	uint8 check_byte;
	uint16 adresses[]={0x0311,0x0312,0x0313,0x0314};
     db2:	ce 01       	movw	r24, r28
     db4:	83 55       	subi	r24, 0x53	; 83
     db6:	9f 4f       	sbci	r25, 0xFF	; 255
     db8:	c7 54       	subi	r28, 0x47	; 71
     dba:	df 4f       	sbci	r29, 0xFF	; 255
     dbc:	99 83       	std	Y+1, r25	; 0x01
     dbe:	88 83       	st	Y, r24
     dc0:	c9 5b       	subi	r28, 0xB9	; 185
     dc2:	d0 40       	sbci	r29, 0x00	; 0
     dc4:	88 e6       	ldi	r24, 0x68	; 104
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	c5 54       	subi	r28, 0x45	; 69
     dca:	df 4f       	sbci	r29, 0xFF	; 255
     dcc:	99 83       	std	Y+1, r25	; 0x01
     dce:	88 83       	st	Y, r24
     dd0:	cb 5b       	subi	r28, 0xBB	; 187
     dd2:	d0 40       	sbci	r29, 0x00	; 0
     dd4:	98 e0       	ldi	r25, 0x08	; 8
     dd6:	c3 54       	subi	r28, 0x43	; 67
     dd8:	df 4f       	sbci	r29, 0xFF	; 255
     dda:	98 83       	st	Y, r25
     ddc:	cd 5b       	subi	r28, 0xBD	; 189
     dde:	d0 40       	sbci	r29, 0x00	; 0
     de0:	c5 54       	subi	r28, 0x45	; 69
     de2:	df 4f       	sbci	r29, 0xFF	; 255
     de4:	e8 81       	ld	r30, Y
     de6:	f9 81       	ldd	r31, Y+1	; 0x01
     de8:	cb 5b       	subi	r28, 0xBB	; 187
     dea:	d0 40       	sbci	r29, 0x00	; 0
     dec:	00 80       	ld	r0, Z
     dee:	c5 54       	subi	r28, 0x45	; 69
     df0:	df 4f       	sbci	r29, 0xFF	; 255
     df2:	88 81       	ld	r24, Y
     df4:	99 81       	ldd	r25, Y+1	; 0x01
     df6:	cb 5b       	subi	r28, 0xBB	; 187
     df8:	d0 40       	sbci	r29, 0x00	; 0
     dfa:	01 96       	adiw	r24, 0x01	; 1
     dfc:	c5 54       	subi	r28, 0x45	; 69
     dfe:	df 4f       	sbci	r29, 0xFF	; 255
     e00:	99 83       	std	Y+1, r25	; 0x01
     e02:	88 83       	st	Y, r24
     e04:	cb 5b       	subi	r28, 0xBB	; 187
     e06:	d0 40       	sbci	r29, 0x00	; 0
     e08:	c7 54       	subi	r28, 0x47	; 71
     e0a:	df 4f       	sbci	r29, 0xFF	; 255
     e0c:	e8 81       	ld	r30, Y
     e0e:	f9 81       	ldd	r31, Y+1	; 0x01
     e10:	c9 5b       	subi	r28, 0xB9	; 185
     e12:	d0 40       	sbci	r29, 0x00	; 0
     e14:	00 82       	st	Z, r0
     e16:	c7 54       	subi	r28, 0x47	; 71
     e18:	df 4f       	sbci	r29, 0xFF	; 255
     e1a:	88 81       	ld	r24, Y
     e1c:	99 81       	ldd	r25, Y+1	; 0x01
     e1e:	c9 5b       	subi	r28, 0xB9	; 185
     e20:	d0 40       	sbci	r29, 0x00	; 0
     e22:	01 96       	adiw	r24, 0x01	; 1
     e24:	c7 54       	subi	r28, 0x47	; 71
     e26:	df 4f       	sbci	r29, 0xFF	; 255
     e28:	99 83       	std	Y+1, r25	; 0x01
     e2a:	88 83       	st	Y, r24
     e2c:	c9 5b       	subi	r28, 0xB9	; 185
     e2e:	d0 40       	sbci	r29, 0x00	; 0
     e30:	c3 54       	subi	r28, 0x43	; 67
     e32:	df 4f       	sbci	r29, 0xFF	; 255
     e34:	98 81       	ld	r25, Y
     e36:	cd 5b       	subi	r28, 0xBD	; 189
     e38:	d0 40       	sbci	r29, 0x00	; 0
     e3a:	91 50       	subi	r25, 0x01	; 1
     e3c:	c3 54       	subi	r28, 0x43	; 67
     e3e:	df 4f       	sbci	r29, 0xFF	; 255
     e40:	98 83       	st	Y, r25
     e42:	cd 5b       	subi	r28, 0xBD	; 189
     e44:	d0 40       	sbci	r29, 0x00	; 0
     e46:	c3 54       	subi	r28, 0x43	; 67
     e48:	df 4f       	sbci	r29, 0xFF	; 255
     e4a:	e8 81       	ld	r30, Y
     e4c:	cd 5b       	subi	r28, 0xBD	; 189
     e4e:	d0 40       	sbci	r29, 0x00	; 0
     e50:	ee 23       	and	r30, r30
     e52:	31 f6       	brne	.-116    	; 0xde0 <main+0x50>


	/*I2C init*/
	TWI_init(BAUD_400Kb);
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	0e 94 76 13 	call	0x26ec	; 0x26ec <TWI_init>

	/*
	 * UART_initialization
	 * */
	UART_ConfigType UART_configurations;
	UART_configurations.baud_rate=9600;
     e5a:	fe 01       	movw	r30, r28
     e5c:	eb 54       	subi	r30, 0x4B	; 75
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	80 e8       	ldi	r24, 0x80	; 128
     e62:	95 e2       	ldi	r25, 0x25	; 37
     e64:	91 83       	std	Z+1, r25	; 0x01
     e66:	80 83       	st	Z, r24
	UART_configurations.ch_size=bit_8;
     e68:	fe 01       	movw	r30, r28
     e6a:	eb 54       	subi	r30, 0x4B	; 75
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	83 e0       	ldi	r24, 0x03	; 3
     e70:	83 83       	std	Z+3, r24	; 0x03
	UART_configurations.parity_type=none;
     e72:	fe 01       	movw	r30, r28
     e74:	eb 54       	subi	r30, 0x4B	; 75
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	12 82       	std	Z+2, r1	; 0x02
	UART_init(&UART_configurations);
     e7a:	ce 01       	movw	r24, r28
     e7c:	8b 54       	subi	r24, 0x4B	; 75
     e7e:	9f 4f       	sbci	r25, 0xFF	; 255
     e80:	0e 94 04 14 	call	0x2808	; 0x2808 <UART_init>
	DcMotor_init();
     e84:	0e 94 c7 05 	call	0xb8e	; 0xb8e <DcMotor_init>
	//TIMER0_init(CTC);
	//TIMER0_countMilliSeconds_ctc(3000,FCPU_1024);
	while(1)
	{

		check_byte=UART_receiveByte();
     e88:	0e 94 80 14 	call	0x2900	; 0x2900 <UART_receiveByte>
     e8c:	fe 01       	movw	r30, r28
     e8e:	e5 56       	subi	r30, 0x65	; 101
     e90:	ff 4f       	sbci	r31, 0xFF	; 255
     e92:	80 83       	st	Z, r24
		if(check_byte==are_you_ready_for_password)
     e94:	fe 01       	movw	r30, r28
     e96:	e5 56       	subi	r30, 0x65	; 101
     e98:	ff 4f       	sbci	r31, 0xFF	; 255
     e9a:	80 81       	ld	r24, Z
     e9c:	8e 31       	cpi	r24, 0x1E	; 30
     e9e:	09 f0       	breq	.+2      	; 0xea2 <main+0x112>
     ea0:	f1 c0       	rjmp	.+482    	; 0x1084 <main+0x2f4>
		{
			UART_sendByte(ready_for_password);
     ea2:	8f e1       	ldi	r24, 0x1F	; 31
     ea4:	0e 94 69 14 	call	0x28d2	; 0x28d2 <UART_sendByte>
			UART_receiveString(password);
     ea8:	ce 01       	movw	r24, r28
     eaa:	83 56       	subi	r24, 0x63	; 99
     eac:	9f 4f       	sbci	r25, 0xFF	; 255
     eae:	0e 94 b8 14 	call	0x2970	; 0x2970 <UART_receiveString>

			for(i=0;i<4;i++)
     eb2:	fe 01       	movw	r30, r28
     eb4:	e4 56       	subi	r30, 0x64	; 100
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	10 82       	st	Z, r1
     eba:	dd c0       	rjmp	.+442    	; 0x1076 <main+0x2e6>
			{

				EEPROM_writeByte(adresses[i],password[i]);
     ebc:	fe 01       	movw	r30, r28
     ebe:	e4 56       	subi	r30, 0x64	; 100
     ec0:	ff 4f       	sbci	r31, 0xFF	; 255
     ec2:	80 81       	ld	r24, Z
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	9e 01       	movw	r18, r28
     eca:	23 55       	subi	r18, 0x53	; 83
     ecc:	3f 4f       	sbci	r19, 0xFF	; 255
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	f9 01       	movw	r30, r18
     ed4:	e8 0f       	add	r30, r24
     ed6:	f9 1f       	adc	r31, r25
     ed8:	40 81       	ld	r20, Z
     eda:	51 81       	ldd	r21, Z+1	; 0x01
     edc:	fe 01       	movw	r30, r28
     ede:	e4 56       	subi	r30, 0x64	; 100
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	80 81       	ld	r24, Z
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	ce 01       	movw	r24, r28
     eea:	83 56       	subi	r24, 0x63	; 99
     eec:	9f 4f       	sbci	r25, 0xFF	; 255
     eee:	fc 01       	movw	r30, r24
     ef0:	e2 0f       	add	r30, r18
     ef2:	f3 1f       	adc	r31, r19
     ef4:	20 81       	ld	r18, Z
     ef6:	ca 01       	movw	r24, r20
     ef8:	62 2f       	mov	r22, r18
     efa:	0e 94 27 06 	call	0xc4e	; 0xc4e <EEPROM_writeByte>
     efe:	fe 01       	movw	r30, r28
     f00:	e9 56       	subi	r30, 0x69	; 105
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	a0 e2       	ldi	r26, 0x20	; 32
     f0a:	b1 e4       	ldi	r27, 0x41	; 65
     f0c:	80 83       	st	Z, r24
     f0e:	91 83       	std	Z+1, r25	; 0x01
     f10:	a2 83       	std	Z+2, r26	; 0x02
     f12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f14:	8e 01       	movw	r16, r28
     f16:	0d 56       	subi	r16, 0x6D	; 109
     f18:	1f 4f       	sbci	r17, 0xFF	; 255
     f1a:	fe 01       	movw	r30, r28
     f1c:	e9 56       	subi	r30, 0x69	; 105
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	60 81       	ld	r22, Z
     f22:	71 81       	ldd	r23, Z+1	; 0x01
     f24:	82 81       	ldd	r24, Z+2	; 0x02
     f26:	93 81       	ldd	r25, Z+3	; 0x03
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	4a ef       	ldi	r20, 0xFA	; 250
     f2e:	54 e4       	ldi	r21, 0x44	; 68
     f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	f8 01       	movw	r30, r16
     f3a:	80 83       	st	Z, r24
     f3c:	91 83       	std	Z+1, r25	; 0x01
     f3e:	a2 83       	std	Z+2, r26	; 0x02
     f40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f42:	fe 01       	movw	r30, r28
     f44:	ed 56       	subi	r30, 0x6D	; 109
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	60 81       	ld	r22, Z
     f4a:	71 81       	ldd	r23, Z+1	; 0x01
     f4c:	82 81       	ldd	r24, Z+2	; 0x02
     f4e:	93 81       	ldd	r25, Z+3	; 0x03
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e8       	ldi	r20, 0x80	; 128
     f56:	5f e3       	ldi	r21, 0x3F	; 63
     f58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f5c:	88 23       	and	r24, r24
     f5e:	44 f4       	brge	.+16     	; 0xf70 <main+0x1e0>
		__ticks = 1;
     f60:	fe 01       	movw	r30, r28
     f62:	ef 56       	subi	r30, 0x6F	; 111
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	80 83       	st	Z, r24
     f6e:	64 c0       	rjmp	.+200    	; 0x1038 <main+0x2a8>
	else if (__tmp > 65535)
     f70:	fe 01       	movw	r30, r28
     f72:	ed 56       	subi	r30, 0x6D	; 109
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	60 81       	ld	r22, Z
     f78:	71 81       	ldd	r23, Z+1	; 0x01
     f7a:	82 81       	ldd	r24, Z+2	; 0x02
     f7c:	93 81       	ldd	r25, Z+3	; 0x03
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	3f ef       	ldi	r19, 0xFF	; 255
     f82:	4f e7       	ldi	r20, 0x7F	; 127
     f84:	57 e4       	ldi	r21, 0x47	; 71
     f86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f8a:	18 16       	cp	r1, r24
     f8c:	0c f0       	brlt	.+2      	; 0xf90 <main+0x200>
     f8e:	43 c0       	rjmp	.+134    	; 0x1016 <main+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f90:	fe 01       	movw	r30, r28
     f92:	e9 56       	subi	r30, 0x69	; 105
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	60 81       	ld	r22, Z
     f98:	71 81       	ldd	r23, Z+1	; 0x01
     f9a:	82 81       	ldd	r24, Z+2	; 0x02
     f9c:	93 81       	ldd	r25, Z+3	; 0x03
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e2       	ldi	r20, 0x20	; 32
     fa4:	51 e4       	ldi	r21, 0x41	; 65
     fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	8e 01       	movw	r16, r28
     fb0:	0f 56       	subi	r16, 0x6F	; 111
     fb2:	1f 4f       	sbci	r17, 0xFF	; 255
     fb4:	bc 01       	movw	r22, r24
     fb6:	cd 01       	movw	r24, r26
     fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	f8 01       	movw	r30, r16
     fc2:	91 83       	std	Z+1, r25	; 0x01
     fc4:	80 83       	st	Z, r24
     fc6:	1f c0       	rjmp	.+62     	; 0x1006 <main+0x276>
     fc8:	fe 01       	movw	r30, r28
     fca:	e1 57       	subi	r30, 0x71	; 113
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	88 ec       	ldi	r24, 0xC8	; 200
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	91 83       	std	Z+1, r25	; 0x01
     fd4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fd6:	fe 01       	movw	r30, r28
     fd8:	e1 57       	subi	r30, 0x71	; 113
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	80 81       	ld	r24, Z
     fde:	91 81       	ldd	r25, Z+1	; 0x01
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <main+0x250>
     fe4:	fe 01       	movw	r30, r28
     fe6:	e1 57       	subi	r30, 0x71	; 113
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	91 83       	std	Z+1, r25	; 0x01
     fec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fee:	de 01       	movw	r26, r28
     ff0:	af 56       	subi	r26, 0x6F	; 111
     ff2:	bf 4f       	sbci	r27, 0xFF	; 255
     ff4:	fe 01       	movw	r30, r28
     ff6:	ef 56       	subi	r30, 0x6F	; 111
     ff8:	ff 4f       	sbci	r31, 0xFF	; 255
     ffa:	80 81       	ld	r24, Z
     ffc:	91 81       	ldd	r25, Z+1	; 0x01
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	11 96       	adiw	r26, 0x01	; 1
    1002:	9c 93       	st	X, r25
    1004:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1006:	fe 01       	movw	r30, r28
    1008:	ef 56       	subi	r30, 0x6F	; 111
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	80 81       	ld	r24, Z
    100e:	91 81       	ldd	r25, Z+1	; 0x01
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	d1 f6       	brne	.-76     	; 0xfc8 <main+0x238>
    1014:	27 c0       	rjmp	.+78     	; 0x1064 <main+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1016:	8e 01       	movw	r16, r28
    1018:	0f 56       	subi	r16, 0x6F	; 111
    101a:	1f 4f       	sbci	r17, 0xFF	; 255
    101c:	fe 01       	movw	r30, r28
    101e:	ed 56       	subi	r30, 0x6D	; 109
    1020:	ff 4f       	sbci	r31, 0xFF	; 255
    1022:	60 81       	ld	r22, Z
    1024:	71 81       	ldd	r23, Z+1	; 0x01
    1026:	82 81       	ldd	r24, Z+2	; 0x02
    1028:	93 81       	ldd	r25, Z+3	; 0x03
    102a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	f8 01       	movw	r30, r16
    1034:	91 83       	std	Z+1, r25	; 0x01
    1036:	80 83       	st	Z, r24
    1038:	de 01       	movw	r26, r28
    103a:	a3 57       	subi	r26, 0x73	; 115
    103c:	bf 4f       	sbci	r27, 0xFF	; 255
    103e:	fe 01       	movw	r30, r28
    1040:	ef 56       	subi	r30, 0x6F	; 111
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	80 81       	ld	r24, Z
    1046:	91 81       	ldd	r25, Z+1	; 0x01
    1048:	8d 93       	st	X+, r24
    104a:	9c 93       	st	X, r25
    104c:	fe 01       	movw	r30, r28
    104e:	e3 57       	subi	r30, 0x73	; 115
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	80 81       	ld	r24, Z
    1054:	91 81       	ldd	r25, Z+1	; 0x01
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <main+0x2c6>
    105a:	fe 01       	movw	r30, r28
    105c:	e3 57       	subi	r30, 0x73	; 115
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	91 83       	std	Z+1, r25	; 0x01
    1062:	80 83       	st	Z, r24
		if(check_byte==are_you_ready_for_password)
		{
			UART_sendByte(ready_for_password);
			UART_receiveString(password);

			for(i=0;i<4;i++)
    1064:	de 01       	movw	r26, r28
    1066:	a4 56       	subi	r26, 0x64	; 100
    1068:	bf 4f       	sbci	r27, 0xFF	; 255
    106a:	fe 01       	movw	r30, r28
    106c:	e4 56       	subi	r30, 0x64	; 100
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	80 81       	ld	r24, Z
    1072:	8f 5f       	subi	r24, 0xFF	; 255
    1074:	8c 93       	st	X, r24
    1076:	fe 01       	movw	r30, r28
    1078:	e4 56       	subi	r30, 0x64	; 100
    107a:	ff 4f       	sbci	r31, 0xFF	; 255
    107c:	80 81       	ld	r24, Z
    107e:	84 30       	cpi	r24, 0x04	; 4
    1080:	08 f4       	brcc	.+2      	; 0x1084 <main+0x2f4>
    1082:	1c cf       	rjmp	.-456    	; 0xebc <main+0x12c>
				_delay_ms(10);

			}
		}
		/*---------------------------------------------------------------------------------------*/
		if(check_byte==are_you_ready_to_confirm_to_open_doors)
    1084:	fe 01       	movw	r30, r28
    1086:	e5 56       	subi	r30, 0x65	; 101
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	80 81       	ld	r24, Z
    108c:	80 32       	cpi	r24, 0x20	; 32
    108e:	09 f0       	breq	.+2      	; 0x1092 <main+0x302>
    1090:	2c c1       	rjmp	.+600    	; 0x12ea <main+0x55a>
		{
			for(i=0;i<4;i++)
    1092:	fe 01       	movw	r30, r28
    1094:	e4 56       	subi	r30, 0x64	; 100
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	10 82       	st	Z, r1
    109a:	db c0       	rjmp	.+438    	; 0x1252 <main+0x4c2>
			{
				EEPROM_readByte(adresses[i],&password_check[i]);
    109c:	fe 01       	movw	r30, r28
    109e:	e4 56       	subi	r30, 0x64	; 100
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	80 81       	ld	r24, Z
    10a4:	88 2f       	mov	r24, r24
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	9e 01       	movw	r18, r28
    10aa:	23 55       	subi	r18, 0x53	; 83
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	f9 01       	movw	r30, r18
    10b4:	e8 0f       	add	r30, r24
    10b6:	f9 1f       	adc	r31, r25
    10b8:	40 81       	ld	r20, Z
    10ba:	51 81       	ldd	r21, Z+1	; 0x01
    10bc:	fe 01       	movw	r30, r28
    10be:	e4 56       	subi	r30, 0x64	; 100
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	80 81       	ld	r24, Z
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	9e 01       	movw	r18, r28
    10ca:	2b 55       	subi	r18, 0x5B	; 91
    10cc:	3f 4f       	sbci	r19, 0xFF	; 255
    10ce:	28 0f       	add	r18, r24
    10d0:	39 1f       	adc	r19, r25
    10d2:	ca 01       	movw	r24, r20
    10d4:	b9 01       	movw	r22, r18
    10d6:	0e 94 68 06 	call	0xcd0	; 0xcd0 <EEPROM_readByte>
    10da:	fe 01       	movw	r30, r28
    10dc:	e7 57       	subi	r30, 0x77	; 119
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	a0 e2       	ldi	r26, 0x20	; 32
    10e6:	b1 e4       	ldi	r27, 0x41	; 65
    10e8:	80 83       	st	Z, r24
    10ea:	91 83       	std	Z+1, r25	; 0x01
    10ec:	a2 83       	std	Z+2, r26	; 0x02
    10ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f0:	8e 01       	movw	r16, r28
    10f2:	0b 57       	subi	r16, 0x7B	; 123
    10f4:	1f 4f       	sbci	r17, 0xFF	; 255
    10f6:	fe 01       	movw	r30, r28
    10f8:	e7 57       	subi	r30, 0x77	; 119
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	60 81       	ld	r22, Z
    10fe:	71 81       	ldd	r23, Z+1	; 0x01
    1100:	82 81       	ldd	r24, Z+2	; 0x02
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	4a ef       	ldi	r20, 0xFA	; 250
    110a:	54 e4       	ldi	r21, 0x44	; 68
    110c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	f8 01       	movw	r30, r16
    1116:	80 83       	st	Z, r24
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	a2 83       	std	Z+2, r26	; 0x02
    111c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    111e:	fe 01       	movw	r30, r28
    1120:	eb 57       	subi	r30, 0x7B	; 123
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	60 81       	ld	r22, Z
    1126:	71 81       	ldd	r23, Z+1	; 0x01
    1128:	82 81       	ldd	r24, Z+2	; 0x02
    112a:	93 81       	ldd	r25, Z+3	; 0x03
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	40 e8       	ldi	r20, 0x80	; 128
    1132:	5f e3       	ldi	r21, 0x3F	; 63
    1134:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1138:	88 23       	and	r24, r24
    113a:	44 f4       	brge	.+16     	; 0x114c <main+0x3bc>
		__ticks = 1;
    113c:	fe 01       	movw	r30, r28
    113e:	ed 57       	subi	r30, 0x7D	; 125
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	91 83       	std	Z+1, r25	; 0x01
    1148:	80 83       	st	Z, r24
    114a:	64 c0       	rjmp	.+200    	; 0x1214 <main+0x484>
	else if (__tmp > 65535)
    114c:	fe 01       	movw	r30, r28
    114e:	eb 57       	subi	r30, 0x7B	; 123
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	60 81       	ld	r22, Z
    1154:	71 81       	ldd	r23, Z+1	; 0x01
    1156:	82 81       	ldd	r24, Z+2	; 0x02
    1158:	93 81       	ldd	r25, Z+3	; 0x03
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	3f ef       	ldi	r19, 0xFF	; 255
    115e:	4f e7       	ldi	r20, 0x7F	; 127
    1160:	57 e4       	ldi	r21, 0x47	; 71
    1162:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1166:	18 16       	cp	r1, r24
    1168:	0c f0       	brlt	.+2      	; 0x116c <main+0x3dc>
    116a:	43 c0       	rjmp	.+134    	; 0x11f2 <main+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116c:	fe 01       	movw	r30, r28
    116e:	e7 57       	subi	r30, 0x77	; 119
    1170:	ff 4f       	sbci	r31, 0xFF	; 255
    1172:	60 81       	ld	r22, Z
    1174:	71 81       	ldd	r23, Z+1	; 0x01
    1176:	82 81       	ldd	r24, Z+2	; 0x02
    1178:	93 81       	ldd	r25, Z+3	; 0x03
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e2       	ldi	r20, 0x20	; 32
    1180:	51 e4       	ldi	r21, 0x41	; 65
    1182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	8e 01       	movw	r16, r28
    118c:	0d 57       	subi	r16, 0x7D	; 125
    118e:	1f 4f       	sbci	r17, 0xFF	; 255
    1190:	bc 01       	movw	r22, r24
    1192:	cd 01       	movw	r24, r26
    1194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	f8 01       	movw	r30, r16
    119e:	91 83       	std	Z+1, r25	; 0x01
    11a0:	80 83       	st	Z, r24
    11a2:	1f c0       	rjmp	.+62     	; 0x11e2 <main+0x452>
    11a4:	fe 01       	movw	r30, r28
    11a6:	ef 57       	subi	r30, 0x7F	; 127
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	88 ec       	ldi	r24, 0xC8	; 200
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	91 83       	std	Z+1, r25	; 0x01
    11b0:	80 83       	st	Z, r24
    11b2:	fe 01       	movw	r30, r28
    11b4:	ef 57       	subi	r30, 0x7F	; 127
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	80 81       	ld	r24, Z
    11ba:	91 81       	ldd	r25, Z+1	; 0x01
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <main+0x42c>
    11c0:	fe 01       	movw	r30, r28
    11c2:	ef 57       	subi	r30, 0x7F	; 127
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	91 83       	std	Z+1, r25	; 0x01
    11c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ca:	de 01       	movw	r26, r28
    11cc:	ad 57       	subi	r26, 0x7D	; 125
    11ce:	bf 4f       	sbci	r27, 0xFF	; 255
    11d0:	fe 01       	movw	r30, r28
    11d2:	ed 57       	subi	r30, 0x7D	; 125
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	80 81       	ld	r24, Z
    11d8:	91 81       	ldd	r25, Z+1	; 0x01
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	11 96       	adiw	r26, 0x01	; 1
    11de:	9c 93       	st	X, r25
    11e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e2:	fe 01       	movw	r30, r28
    11e4:	ed 57       	subi	r30, 0x7D	; 125
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	80 81       	ld	r24, Z
    11ea:	91 81       	ldd	r25, Z+1	; 0x01
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	d1 f6       	brne	.-76     	; 0x11a4 <main+0x414>
    11f0:	27 c0       	rjmp	.+78     	; 0x1240 <main+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f2:	8e 01       	movw	r16, r28
    11f4:	0d 57       	subi	r16, 0x7D	; 125
    11f6:	1f 4f       	sbci	r17, 0xFF	; 255
    11f8:	fe 01       	movw	r30, r28
    11fa:	eb 57       	subi	r30, 0x7B	; 123
    11fc:	ff 4f       	sbci	r31, 0xFF	; 255
    11fe:	60 81       	ld	r22, Z
    1200:	71 81       	ldd	r23, Z+1	; 0x01
    1202:	82 81       	ldd	r24, Z+2	; 0x02
    1204:	93 81       	ldd	r25, Z+3	; 0x03
    1206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	f8 01       	movw	r30, r16
    1210:	91 83       	std	Z+1, r25	; 0x01
    1212:	80 83       	st	Z, r24
    1214:	de 01       	movw	r26, r28
    1216:	a1 58       	subi	r26, 0x81	; 129
    1218:	bf 4f       	sbci	r27, 0xFF	; 255
    121a:	fe 01       	movw	r30, r28
    121c:	ed 57       	subi	r30, 0x7D	; 125
    121e:	ff 4f       	sbci	r31, 0xFF	; 255
    1220:	80 81       	ld	r24, Z
    1222:	91 81       	ldd	r25, Z+1	; 0x01
    1224:	8d 93       	st	X+, r24
    1226:	9c 93       	st	X, r25
    1228:	fe 01       	movw	r30, r28
    122a:	e1 58       	subi	r30, 0x81	; 129
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	80 81       	ld	r24, Z
    1230:	91 81       	ldd	r25, Z+1	; 0x01
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	f1 f7       	brne	.-4      	; 0x1232 <main+0x4a2>
    1236:	fe 01       	movw	r30, r28
    1238:	e1 58       	subi	r30, 0x81	; 129
    123a:	ff 4f       	sbci	r31, 0xFF	; 255
    123c:	91 83       	std	Z+1, r25	; 0x01
    123e:	80 83       	st	Z, r24
			}
		}
		/*---------------------------------------------------------------------------------------*/
		if(check_byte==are_you_ready_to_confirm_to_open_doors)
		{
			for(i=0;i<4;i++)
    1240:	de 01       	movw	r26, r28
    1242:	a4 56       	subi	r26, 0x64	; 100
    1244:	bf 4f       	sbci	r27, 0xFF	; 255
    1246:	fe 01       	movw	r30, r28
    1248:	e4 56       	subi	r30, 0x64	; 100
    124a:	ff 4f       	sbci	r31, 0xFF	; 255
    124c:	80 81       	ld	r24, Z
    124e:	8f 5f       	subi	r24, 0xFF	; 255
    1250:	8c 93       	st	X, r24
    1252:	fe 01       	movw	r30, r28
    1254:	e4 56       	subi	r30, 0x64	; 100
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	80 81       	ld	r24, Z
    125a:	84 30       	cpi	r24, 0x04	; 4
    125c:	08 f4       	brcc	.+2      	; 0x1260 <main+0x4d0>
    125e:	1e cf       	rjmp	.-452    	; 0x109c <main+0x30c>
			{
				EEPROM_readByte(adresses[i],&password_check[i]);
				_delay_ms(10);
			}
			UART_sendByte(ready_to_confirm_to_open_doors);
    1260:	81 e2       	ldi	r24, 0x21	; 33
    1262:	0e 94 69 14 	call	0x28d2	; 0x28d2 <UART_sendByte>
			UART_receiveString(password);
    1266:	ce 01       	movw	r24, r28
    1268:	83 56       	subi	r24, 0x63	; 99
    126a:	9f 4f       	sbci	r25, 0xFF	; 255
    126c:	0e 94 b8 14 	call	0x2970	; 0x2970 <UART_receiveString>

			for(i=0;i<4;i++)
    1270:	fe 01       	movw	r30, r28
    1272:	e4 56       	subi	r30, 0x64	; 100
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	10 82       	st	Z, r1
    1278:	32 c0       	rjmp	.+100    	; 0x12de <main+0x54e>
			{
				if(password[i]!=password_check[i])
    127a:	fe 01       	movw	r30, r28
    127c:	e4 56       	subi	r30, 0x64	; 100
    127e:	ff 4f       	sbci	r31, 0xFF	; 255
    1280:	80 81       	ld	r24, Z
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	ce 01       	movw	r24, r28
    1288:	83 56       	subi	r24, 0x63	; 99
    128a:	9f 4f       	sbci	r25, 0xFF	; 255
    128c:	fc 01       	movw	r30, r24
    128e:	e2 0f       	add	r30, r18
    1290:	f3 1f       	adc	r31, r19
    1292:	40 81       	ld	r20, Z
    1294:	fe 01       	movw	r30, r28
    1296:	e4 56       	subi	r30, 0x64	; 100
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	80 81       	ld	r24, Z
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	ce 01       	movw	r24, r28
    12a2:	8b 55       	subi	r24, 0x5B	; 91
    12a4:	9f 4f       	sbci	r25, 0xFF	; 255
    12a6:	fc 01       	movw	r30, r24
    12a8:	e2 0f       	add	r30, r18
    12aa:	f3 1f       	adc	r31, r19
    12ac:	80 81       	ld	r24, Z
    12ae:	48 17       	cp	r20, r24
    12b0:	21 f0       	breq	.+8      	; 0x12ba <main+0x52a>
				{
					UART_sendByte(unconfirmed);
    12b2:	83 e2       	ldi	r24, 0x23	; 35
    12b4:	0e 94 69 14 	call	0x28d2	; 0x28d2 <UART_sendByte>
    12b8:	18 c0       	rjmp	.+48     	; 0x12ea <main+0x55a>
					break;
				}
				else
				{
					if(i==3)
    12ba:	fe 01       	movw	r30, r28
    12bc:	e4 56       	subi	r30, 0x64	; 100
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	80 81       	ld	r24, Z
    12c2:	83 30       	cpi	r24, 0x03	; 3
    12c4:	19 f4       	brne	.+6      	; 0x12cc <main+0x53c>
					{
						UART_sendByte(confirmed);
    12c6:	82 e2       	ldi	r24, 0x22	; 34
    12c8:	0e 94 69 14 	call	0x28d2	; 0x28d2 <UART_sendByte>
				_delay_ms(10);
			}
			UART_sendByte(ready_to_confirm_to_open_doors);
			UART_receiveString(password);

			for(i=0;i<4;i++)
    12cc:	de 01       	movw	r26, r28
    12ce:	a4 56       	subi	r26, 0x64	; 100
    12d0:	bf 4f       	sbci	r27, 0xFF	; 255
    12d2:	fe 01       	movw	r30, r28
    12d4:	e4 56       	subi	r30, 0x64	; 100
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	80 81       	ld	r24, Z
    12da:	8f 5f       	subi	r24, 0xFF	; 255
    12dc:	8c 93       	st	X, r24
    12de:	fe 01       	movw	r30, r28
    12e0:	e4 56       	subi	r30, 0x64	; 100
    12e2:	ff 4f       	sbci	r31, 0xFF	; 255
    12e4:	80 81       	ld	r24, Z
    12e6:	84 30       	cpi	r24, 0x04	; 4
    12e8:	40 f2       	brcs	.-112    	; 0x127a <main+0x4ea>
				}
			}
		}

		/*---------------------------------------------------------------------------------------*/
		if(check_byte==are_you_ready_to_open)
    12ea:	fe 01       	movw	r30, r28
    12ec:	e5 56       	subi	r30, 0x65	; 101
    12ee:	ff 4f       	sbci	r31, 0xFF	; 255
    12f0:	80 81       	ld	r24, Z
    12f2:	84 32       	cpi	r24, 0x24	; 36
    12f4:	19 f4       	brne	.+6      	; 0x12fc <main+0x56c>
		{
			UART_sendByte(ready_to_open_doors);
    12f6:	85 e2       	ldi	r24, 0x25	; 37
    12f8:	0e 94 69 14 	call	0x28d2	; 0x28d2 <UART_sendByte>
		}
		if(check_byte==open_the_door)
    12fc:	fe 01       	movw	r30, r28
    12fe:	e5 56       	subi	r30, 0x65	; 101
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	80 81       	ld	r24, Z
    1304:	86 32       	cpi	r24, 0x26	; 38
    1306:	09 f0       	breq	.+2      	; 0x130a <main+0x57a>
    1308:	44 c4       	rjmp	.+2184   	; 0x1b92 <main+0xe02>
		{
			DcMotor_Rotate(CW);
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
    1310:	fe 01       	movw	r30, r28
    1312:	e5 58       	subi	r30, 0x85	; 133
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	90 e8       	ldi	r25, 0x80	; 128
    131a:	ab eb       	ldi	r26, 0xBB	; 187
    131c:	b5 e4       	ldi	r27, 0x45	; 69
    131e:	80 83       	st	Z, r24
    1320:	91 83       	std	Z+1, r25	; 0x01
    1322:	a2 83       	std	Z+2, r26	; 0x02
    1324:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1326:	8e 01       	movw	r16, r28
    1328:	09 58       	subi	r16, 0x89	; 137
    132a:	1f 4f       	sbci	r17, 0xFF	; 255
    132c:	fe 01       	movw	r30, r28
    132e:	e5 58       	subi	r30, 0x85	; 133
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	60 81       	ld	r22, Z
    1334:	71 81       	ldd	r23, Z+1	; 0x01
    1336:	82 81       	ldd	r24, Z+2	; 0x02
    1338:	93 81       	ldd	r25, Z+3	; 0x03
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	4a ef       	ldi	r20, 0xFA	; 250
    1340:	54 e4       	ldi	r21, 0x44	; 68
    1342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	f8 01       	movw	r30, r16
    134c:	80 83       	st	Z, r24
    134e:	91 83       	std	Z+1, r25	; 0x01
    1350:	a2 83       	std	Z+2, r26	; 0x02
    1352:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1354:	fe 01       	movw	r30, r28
    1356:	e9 58       	subi	r30, 0x89	; 137
    1358:	ff 4f       	sbci	r31, 0xFF	; 255
    135a:	60 81       	ld	r22, Z
    135c:	71 81       	ldd	r23, Z+1	; 0x01
    135e:	82 81       	ldd	r24, Z+2	; 0x02
    1360:	93 81       	ldd	r25, Z+3	; 0x03
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	40 e8       	ldi	r20, 0x80	; 128
    1368:	5f e3       	ldi	r21, 0x3F	; 63
    136a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    136e:	88 23       	and	r24, r24
    1370:	44 f4       	brge	.+16     	; 0x1382 <main+0x5f2>
		__ticks = 1;
    1372:	fe 01       	movw	r30, r28
    1374:	eb 58       	subi	r30, 0x8B	; 139
    1376:	ff 4f       	sbci	r31, 0xFF	; 255
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	91 83       	std	Z+1, r25	; 0x01
    137e:	80 83       	st	Z, r24
    1380:	64 c0       	rjmp	.+200    	; 0x144a <main+0x6ba>
	else if (__tmp > 65535)
    1382:	fe 01       	movw	r30, r28
    1384:	e9 58       	subi	r30, 0x89	; 137
    1386:	ff 4f       	sbci	r31, 0xFF	; 255
    1388:	60 81       	ld	r22, Z
    138a:	71 81       	ldd	r23, Z+1	; 0x01
    138c:	82 81       	ldd	r24, Z+2	; 0x02
    138e:	93 81       	ldd	r25, Z+3	; 0x03
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	3f ef       	ldi	r19, 0xFF	; 255
    1394:	4f e7       	ldi	r20, 0x7F	; 127
    1396:	57 e4       	ldi	r21, 0x47	; 71
    1398:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    139c:	18 16       	cp	r1, r24
    139e:	0c f0       	brlt	.+2      	; 0x13a2 <main+0x612>
    13a0:	43 c0       	rjmp	.+134    	; 0x1428 <main+0x698>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a2:	fe 01       	movw	r30, r28
    13a4:	e5 58       	subi	r30, 0x85	; 133
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	60 81       	ld	r22, Z
    13aa:	71 81       	ldd	r23, Z+1	; 0x01
    13ac:	82 81       	ldd	r24, Z+2	; 0x02
    13ae:	93 81       	ldd	r25, Z+3	; 0x03
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	40 e2       	ldi	r20, 0x20	; 32
    13b6:	51 e4       	ldi	r21, 0x41	; 65
    13b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	8e 01       	movw	r16, r28
    13c2:	0b 58       	subi	r16, 0x8B	; 139
    13c4:	1f 4f       	sbci	r17, 0xFF	; 255
    13c6:	bc 01       	movw	r22, r24
    13c8:	cd 01       	movw	r24, r26
    13ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	f8 01       	movw	r30, r16
    13d4:	91 83       	std	Z+1, r25	; 0x01
    13d6:	80 83       	st	Z, r24
    13d8:	1f c0       	rjmp	.+62     	; 0x1418 <main+0x688>
    13da:	fe 01       	movw	r30, r28
    13dc:	ed 58       	subi	r30, 0x8D	; 141
    13de:	ff 4f       	sbci	r31, 0xFF	; 255
    13e0:	88 ec       	ldi	r24, 0xC8	; 200
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	80 83       	st	Z, r24
    13e8:	fe 01       	movw	r30, r28
    13ea:	ed 58       	subi	r30, 0x8D	; 141
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	80 81       	ld	r24, Z
    13f0:	91 81       	ldd	r25, Z+1	; 0x01
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <main+0x662>
    13f6:	fe 01       	movw	r30, r28
    13f8:	ed 58       	subi	r30, 0x8D	; 141
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	91 83       	std	Z+1, r25	; 0x01
    13fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1400:	de 01       	movw	r26, r28
    1402:	ab 58       	subi	r26, 0x8B	; 139
    1404:	bf 4f       	sbci	r27, 0xFF	; 255
    1406:	fe 01       	movw	r30, r28
    1408:	eb 58       	subi	r30, 0x8B	; 139
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	80 81       	ld	r24, Z
    140e:	91 81       	ldd	r25, Z+1	; 0x01
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	11 96       	adiw	r26, 0x01	; 1
    1414:	9c 93       	st	X, r25
    1416:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1418:	fe 01       	movw	r30, r28
    141a:	eb 58       	subi	r30, 0x8B	; 139
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	80 81       	ld	r24, Z
    1420:	91 81       	ldd	r25, Z+1	; 0x01
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	d1 f6       	brne	.-76     	; 0x13da <main+0x64a>
    1426:	27 c0       	rjmp	.+78     	; 0x1476 <main+0x6e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1428:	8e 01       	movw	r16, r28
    142a:	0b 58       	subi	r16, 0x8B	; 139
    142c:	1f 4f       	sbci	r17, 0xFF	; 255
    142e:	fe 01       	movw	r30, r28
    1430:	e9 58       	subi	r30, 0x89	; 137
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	60 81       	ld	r22, Z
    1436:	71 81       	ldd	r23, Z+1	; 0x01
    1438:	82 81       	ldd	r24, Z+2	; 0x02
    143a:	93 81       	ldd	r25, Z+3	; 0x03
    143c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	f8 01       	movw	r30, r16
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	80 83       	st	Z, r24
    144a:	de 01       	movw	r26, r28
    144c:	af 58       	subi	r26, 0x8F	; 143
    144e:	bf 4f       	sbci	r27, 0xFF	; 255
    1450:	fe 01       	movw	r30, r28
    1452:	eb 58       	subi	r30, 0x8B	; 139
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	80 81       	ld	r24, Z
    1458:	91 81       	ldd	r25, Z+1	; 0x01
    145a:	8d 93       	st	X+, r24
    145c:	9c 93       	st	X, r25
    145e:	fe 01       	movw	r30, r28
    1460:	ef 58       	subi	r30, 0x8F	; 143
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	80 81       	ld	r24, Z
    1466:	91 81       	ldd	r25, Z+1	; 0x01
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	f1 f7       	brne	.-4      	; 0x1468 <main+0x6d8>
    146c:	fe 01       	movw	r30, r28
    146e:	ef 58       	subi	r30, 0x8F	; 143
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	91 83       	std	Z+1, r25	; 0x01
    1474:	80 83       	st	Z, r24
    1476:	fe 01       	movw	r30, r28
    1478:	e3 59       	subi	r30, 0x93	; 147
    147a:	ff 4f       	sbci	r31, 0xFF	; 255
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e8       	ldi	r25, 0x80	; 128
    1480:	ab eb       	ldi	r26, 0xBB	; 187
    1482:	b5 e4       	ldi	r27, 0x45	; 69
    1484:	80 83       	st	Z, r24
    1486:	91 83       	std	Z+1, r25	; 0x01
    1488:	a2 83       	std	Z+2, r26	; 0x02
    148a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    148c:	8e 01       	movw	r16, r28
    148e:	07 59       	subi	r16, 0x97	; 151
    1490:	1f 4f       	sbci	r17, 0xFF	; 255
    1492:	fe 01       	movw	r30, r28
    1494:	e3 59       	subi	r30, 0x93	; 147
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	60 81       	ld	r22, Z
    149a:	71 81       	ldd	r23, Z+1	; 0x01
    149c:	82 81       	ldd	r24, Z+2	; 0x02
    149e:	93 81       	ldd	r25, Z+3	; 0x03
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	4a ef       	ldi	r20, 0xFA	; 250
    14a6:	54 e4       	ldi	r21, 0x44	; 68
    14a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	f8 01       	movw	r30, r16
    14b2:	80 83       	st	Z, r24
    14b4:	91 83       	std	Z+1, r25	; 0x01
    14b6:	a2 83       	std	Z+2, r26	; 0x02
    14b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14ba:	fe 01       	movw	r30, r28
    14bc:	e7 59       	subi	r30, 0x97	; 151
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	60 81       	ld	r22, Z
    14c2:	71 81       	ldd	r23, Z+1	; 0x01
    14c4:	82 81       	ldd	r24, Z+2	; 0x02
    14c6:	93 81       	ldd	r25, Z+3	; 0x03
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	40 e8       	ldi	r20, 0x80	; 128
    14ce:	5f e3       	ldi	r21, 0x3F	; 63
    14d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14d4:	88 23       	and	r24, r24
    14d6:	44 f4       	brge	.+16     	; 0x14e8 <main+0x758>
		__ticks = 1;
    14d8:	fe 01       	movw	r30, r28
    14da:	e9 59       	subi	r30, 0x99	; 153
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	91 83       	std	Z+1, r25	; 0x01
    14e4:	80 83       	st	Z, r24
    14e6:	64 c0       	rjmp	.+200    	; 0x15b0 <main+0x820>
	else if (__tmp > 65535)
    14e8:	fe 01       	movw	r30, r28
    14ea:	e7 59       	subi	r30, 0x97	; 151
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	60 81       	ld	r22, Z
    14f0:	71 81       	ldd	r23, Z+1	; 0x01
    14f2:	82 81       	ldd	r24, Z+2	; 0x02
    14f4:	93 81       	ldd	r25, Z+3	; 0x03
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	3f ef       	ldi	r19, 0xFF	; 255
    14fa:	4f e7       	ldi	r20, 0x7F	; 127
    14fc:	57 e4       	ldi	r21, 0x47	; 71
    14fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1502:	18 16       	cp	r1, r24
    1504:	0c f0       	brlt	.+2      	; 0x1508 <main+0x778>
    1506:	43 c0       	rjmp	.+134    	; 0x158e <main+0x7fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1508:	fe 01       	movw	r30, r28
    150a:	e3 59       	subi	r30, 0x93	; 147
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	60 81       	ld	r22, Z
    1510:	71 81       	ldd	r23, Z+1	; 0x01
    1512:	82 81       	ldd	r24, Z+2	; 0x02
    1514:	93 81       	ldd	r25, Z+3	; 0x03
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e2       	ldi	r20, 0x20	; 32
    151c:	51 e4       	ldi	r21, 0x41	; 65
    151e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	8e 01       	movw	r16, r28
    1528:	09 59       	subi	r16, 0x99	; 153
    152a:	1f 4f       	sbci	r17, 0xFF	; 255
    152c:	bc 01       	movw	r22, r24
    152e:	cd 01       	movw	r24, r26
    1530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	f8 01       	movw	r30, r16
    153a:	91 83       	std	Z+1, r25	; 0x01
    153c:	80 83       	st	Z, r24
    153e:	1f c0       	rjmp	.+62     	; 0x157e <main+0x7ee>
    1540:	fe 01       	movw	r30, r28
    1542:	eb 59       	subi	r30, 0x9B	; 155
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	88 ec       	ldi	r24, 0xC8	; 200
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	91 83       	std	Z+1, r25	; 0x01
    154c:	80 83       	st	Z, r24
    154e:	fe 01       	movw	r30, r28
    1550:	eb 59       	subi	r30, 0x9B	; 155
    1552:	ff 4f       	sbci	r31, 0xFF	; 255
    1554:	80 81       	ld	r24, Z
    1556:	91 81       	ldd	r25, Z+1	; 0x01
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <main+0x7c8>
    155c:	fe 01       	movw	r30, r28
    155e:	eb 59       	subi	r30, 0x9B	; 155
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	91 83       	std	Z+1, r25	; 0x01
    1564:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1566:	de 01       	movw	r26, r28
    1568:	a9 59       	subi	r26, 0x99	; 153
    156a:	bf 4f       	sbci	r27, 0xFF	; 255
    156c:	fe 01       	movw	r30, r28
    156e:	e9 59       	subi	r30, 0x99	; 153
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	80 81       	ld	r24, Z
    1574:	91 81       	ldd	r25, Z+1	; 0x01
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	11 96       	adiw	r26, 0x01	; 1
    157a:	9c 93       	st	X, r25
    157c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157e:	fe 01       	movw	r30, r28
    1580:	e9 59       	subi	r30, 0x99	; 153
    1582:	ff 4f       	sbci	r31, 0xFF	; 255
    1584:	80 81       	ld	r24, Z
    1586:	91 81       	ldd	r25, Z+1	; 0x01
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	d1 f6       	brne	.-76     	; 0x1540 <main+0x7b0>
    158c:	27 c0       	rjmp	.+78     	; 0x15dc <main+0x84c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158e:	8e 01       	movw	r16, r28
    1590:	09 59       	subi	r16, 0x99	; 153
    1592:	1f 4f       	sbci	r17, 0xFF	; 255
    1594:	fe 01       	movw	r30, r28
    1596:	e7 59       	subi	r30, 0x97	; 151
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	60 81       	ld	r22, Z
    159c:	71 81       	ldd	r23, Z+1	; 0x01
    159e:	82 81       	ldd	r24, Z+2	; 0x02
    15a0:	93 81       	ldd	r25, Z+3	; 0x03
    15a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	f8 01       	movw	r30, r16
    15ac:	91 83       	std	Z+1, r25	; 0x01
    15ae:	80 83       	st	Z, r24
    15b0:	de 01       	movw	r26, r28
    15b2:	ad 59       	subi	r26, 0x9D	; 157
    15b4:	bf 4f       	sbci	r27, 0xFF	; 255
    15b6:	fe 01       	movw	r30, r28
    15b8:	e9 59       	subi	r30, 0x99	; 153
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	80 81       	ld	r24, Z
    15be:	91 81       	ldd	r25, Z+1	; 0x01
    15c0:	8d 93       	st	X+, r24
    15c2:	9c 93       	st	X, r25
    15c4:	fe 01       	movw	r30, r28
    15c6:	ed 59       	subi	r30, 0x9D	; 157
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	80 81       	ld	r24, Z
    15cc:	91 81       	ldd	r25, Z+1	; 0x01
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	f1 f7       	brne	.-4      	; 0x15ce <main+0x83e>
    15d2:	fe 01       	movw	r30, r28
    15d4:	ed 59       	subi	r30, 0x9D	; 157
    15d6:	ff 4f       	sbci	r31, 0xFF	; 255
    15d8:	91 83       	std	Z+1, r25	; 0x01
    15da:	80 83       	st	Z, r24
    15dc:	fe 01       	movw	r30, r28
    15de:	e1 5a       	subi	r30, 0xA1	; 161
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	aa e7       	ldi	r26, 0x7A	; 122
    15e8:	b4 e4       	ldi	r27, 0x44	; 68
    15ea:	80 83       	st	Z, r24
    15ec:	91 83       	std	Z+1, r25	; 0x01
    15ee:	a2 83       	std	Z+2, r26	; 0x02
    15f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f2:	8e 01       	movw	r16, r28
    15f4:	05 5a       	subi	r16, 0xA5	; 165
    15f6:	1f 4f       	sbci	r17, 0xFF	; 255
    15f8:	fe 01       	movw	r30, r28
    15fa:	e1 5a       	subi	r30, 0xA1	; 161
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	60 81       	ld	r22, Z
    1600:	71 81       	ldd	r23, Z+1	; 0x01
    1602:	82 81       	ldd	r24, Z+2	; 0x02
    1604:	93 81       	ldd	r25, Z+3	; 0x03
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	4a ef       	ldi	r20, 0xFA	; 250
    160c:	54 e4       	ldi	r21, 0x44	; 68
    160e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	f8 01       	movw	r30, r16
    1618:	80 83       	st	Z, r24
    161a:	91 83       	std	Z+1, r25	; 0x01
    161c:	a2 83       	std	Z+2, r26	; 0x02
    161e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1620:	fe 01       	movw	r30, r28
    1622:	e5 5a       	subi	r30, 0xA5	; 165
    1624:	ff 4f       	sbci	r31, 0xFF	; 255
    1626:	60 81       	ld	r22, Z
    1628:	71 81       	ldd	r23, Z+1	; 0x01
    162a:	82 81       	ldd	r24, Z+2	; 0x02
    162c:	93 81       	ldd	r25, Z+3	; 0x03
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e8       	ldi	r20, 0x80	; 128
    1634:	5f e3       	ldi	r21, 0x3F	; 63
    1636:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    163a:	88 23       	and	r24, r24
    163c:	44 f4       	brge	.+16     	; 0x164e <main+0x8be>
		__ticks = 1;
    163e:	fe 01       	movw	r30, r28
    1640:	e7 5a       	subi	r30, 0xA7	; 167
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	91 83       	std	Z+1, r25	; 0x01
    164a:	80 83       	st	Z, r24
    164c:	64 c0       	rjmp	.+200    	; 0x1716 <main+0x986>
	else if (__tmp > 65535)
    164e:	fe 01       	movw	r30, r28
    1650:	e5 5a       	subi	r30, 0xA5	; 165
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	60 81       	ld	r22, Z
    1656:	71 81       	ldd	r23, Z+1	; 0x01
    1658:	82 81       	ldd	r24, Z+2	; 0x02
    165a:	93 81       	ldd	r25, Z+3	; 0x03
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	3f ef       	ldi	r19, 0xFF	; 255
    1660:	4f e7       	ldi	r20, 0x7F	; 127
    1662:	57 e4       	ldi	r21, 0x47	; 71
    1664:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1668:	18 16       	cp	r1, r24
    166a:	0c f0       	brlt	.+2      	; 0x166e <main+0x8de>
    166c:	43 c0       	rjmp	.+134    	; 0x16f4 <main+0x964>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166e:	fe 01       	movw	r30, r28
    1670:	e1 5a       	subi	r30, 0xA1	; 161
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	60 81       	ld	r22, Z
    1676:	71 81       	ldd	r23, Z+1	; 0x01
    1678:	82 81       	ldd	r24, Z+2	; 0x02
    167a:	93 81       	ldd	r25, Z+3	; 0x03
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	40 e2       	ldi	r20, 0x20	; 32
    1682:	51 e4       	ldi	r21, 0x41	; 65
    1684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	8e 01       	movw	r16, r28
    168e:	07 5a       	subi	r16, 0xA7	; 167
    1690:	1f 4f       	sbci	r17, 0xFF	; 255
    1692:	bc 01       	movw	r22, r24
    1694:	cd 01       	movw	r24, r26
    1696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	f8 01       	movw	r30, r16
    16a0:	91 83       	std	Z+1, r25	; 0x01
    16a2:	80 83       	st	Z, r24
    16a4:	1f c0       	rjmp	.+62     	; 0x16e4 <main+0x954>
    16a6:	fe 01       	movw	r30, r28
    16a8:	e9 5a       	subi	r30, 0xA9	; 169
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	88 ec       	ldi	r24, 0xC8	; 200
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	91 83       	std	Z+1, r25	; 0x01
    16b2:	80 83       	st	Z, r24
    16b4:	fe 01       	movw	r30, r28
    16b6:	e9 5a       	subi	r30, 0xA9	; 169
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	80 81       	ld	r24, Z
    16bc:	91 81       	ldd	r25, Z+1	; 0x01
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <main+0x92e>
    16c2:	fe 01       	movw	r30, r28
    16c4:	e9 5a       	subi	r30, 0xA9	; 169
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	91 83       	std	Z+1, r25	; 0x01
    16ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16cc:	de 01       	movw	r26, r28
    16ce:	a7 5a       	subi	r26, 0xA7	; 167
    16d0:	bf 4f       	sbci	r27, 0xFF	; 255
    16d2:	fe 01       	movw	r30, r28
    16d4:	e7 5a       	subi	r30, 0xA7	; 167
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	80 81       	ld	r24, Z
    16da:	91 81       	ldd	r25, Z+1	; 0x01
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	11 96       	adiw	r26, 0x01	; 1
    16e0:	9c 93       	st	X, r25
    16e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e4:	fe 01       	movw	r30, r28
    16e6:	e7 5a       	subi	r30, 0xA7	; 167
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	80 81       	ld	r24, Z
    16ec:	91 81       	ldd	r25, Z+1	; 0x01
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	d1 f6       	brne	.-76     	; 0x16a6 <main+0x916>
    16f2:	27 c0       	rjmp	.+78     	; 0x1742 <main+0x9b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f4:	8e 01       	movw	r16, r28
    16f6:	07 5a       	subi	r16, 0xA7	; 167
    16f8:	1f 4f       	sbci	r17, 0xFF	; 255
    16fa:	fe 01       	movw	r30, r28
    16fc:	e5 5a       	subi	r30, 0xA5	; 165
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	60 81       	ld	r22, Z
    1702:	71 81       	ldd	r23, Z+1	; 0x01
    1704:	82 81       	ldd	r24, Z+2	; 0x02
    1706:	93 81       	ldd	r25, Z+3	; 0x03
    1708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	f8 01       	movw	r30, r16
    1712:	91 83       	std	Z+1, r25	; 0x01
    1714:	80 83       	st	Z, r24
    1716:	de 01       	movw	r26, r28
    1718:	ab 5a       	subi	r26, 0xAB	; 171
    171a:	bf 4f       	sbci	r27, 0xFF	; 255
    171c:	fe 01       	movw	r30, r28
    171e:	e7 5a       	subi	r30, 0xA7	; 167
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	8d 93       	st	X+, r24
    1728:	9c 93       	st	X, r25
    172a:	fe 01       	movw	r30, r28
    172c:	eb 5a       	subi	r30, 0xAB	; 171
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	80 81       	ld	r24, Z
    1732:	91 81       	ldd	r25, Z+1	; 0x01
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <main+0x9a4>
    1738:	fe 01       	movw	r30, r28
    173a:	eb 5a       	subi	r30, 0xAB	; 171
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	91 83       	std	Z+1, r25	; 0x01
    1740:	80 83       	st	Z, r24
			_delay_ms(6000);
			_delay_ms(6000);
			_delay_ms(1000);
			DcMotor_Rotate(STOP);
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
    1748:	fe 01       	movw	r30, r28
    174a:	ef 5a       	subi	r30, 0xAF	; 175
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	90 e8       	ldi	r25, 0x80	; 128
    1752:	ab e3       	ldi	r26, 0x3B	; 59
    1754:	b5 e4       	ldi	r27, 0x45	; 69
    1756:	80 83       	st	Z, r24
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	a2 83       	std	Z+2, r26	; 0x02
    175c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    175e:	8e 01       	movw	r16, r28
    1760:	03 5b       	subi	r16, 0xB3	; 179
    1762:	1f 4f       	sbci	r17, 0xFF	; 255
    1764:	fe 01       	movw	r30, r28
    1766:	ef 5a       	subi	r30, 0xAF	; 175
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	60 81       	ld	r22, Z
    176c:	71 81       	ldd	r23, Z+1	; 0x01
    176e:	82 81       	ldd	r24, Z+2	; 0x02
    1770:	93 81       	ldd	r25, Z+3	; 0x03
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	4a ef       	ldi	r20, 0xFA	; 250
    1778:	54 e4       	ldi	r21, 0x44	; 68
    177a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	f8 01       	movw	r30, r16
    1784:	80 83       	st	Z, r24
    1786:	91 83       	std	Z+1, r25	; 0x01
    1788:	a2 83       	std	Z+2, r26	; 0x02
    178a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    178c:	fe 01       	movw	r30, r28
    178e:	e3 5b       	subi	r30, 0xB3	; 179
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	60 81       	ld	r22, Z
    1794:	71 81       	ldd	r23, Z+1	; 0x01
    1796:	82 81       	ldd	r24, Z+2	; 0x02
    1798:	93 81       	ldd	r25, Z+3	; 0x03
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e8       	ldi	r20, 0x80	; 128
    17a0:	5f e3       	ldi	r21, 0x3F	; 63
    17a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a6:	88 23       	and	r24, r24
    17a8:	44 f4       	brge	.+16     	; 0x17ba <main+0xa2a>
		__ticks = 1;
    17aa:	fe 01       	movw	r30, r28
    17ac:	e5 5b       	subi	r30, 0xB5	; 181
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	91 83       	std	Z+1, r25	; 0x01
    17b6:	80 83       	st	Z, r24
    17b8:	64 c0       	rjmp	.+200    	; 0x1882 <main+0xaf2>
	else if (__tmp > 65535)
    17ba:	fe 01       	movw	r30, r28
    17bc:	e3 5b       	subi	r30, 0xB3	; 179
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	60 81       	ld	r22, Z
    17c2:	71 81       	ldd	r23, Z+1	; 0x01
    17c4:	82 81       	ldd	r24, Z+2	; 0x02
    17c6:	93 81       	ldd	r25, Z+3	; 0x03
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	3f ef       	ldi	r19, 0xFF	; 255
    17cc:	4f e7       	ldi	r20, 0x7F	; 127
    17ce:	57 e4       	ldi	r21, 0x47	; 71
    17d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d4:	18 16       	cp	r1, r24
    17d6:	0c f0       	brlt	.+2      	; 0x17da <main+0xa4a>
    17d8:	43 c0       	rjmp	.+134    	; 0x1860 <main+0xad0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17da:	fe 01       	movw	r30, r28
    17dc:	ef 5a       	subi	r30, 0xAF	; 175
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	60 81       	ld	r22, Z
    17e2:	71 81       	ldd	r23, Z+1	; 0x01
    17e4:	82 81       	ldd	r24, Z+2	; 0x02
    17e6:	93 81       	ldd	r25, Z+3	; 0x03
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e2       	ldi	r20, 0x20	; 32
    17ee:	51 e4       	ldi	r21, 0x41	; 65
    17f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	8e 01       	movw	r16, r28
    17fa:	05 5b       	subi	r16, 0xB5	; 181
    17fc:	1f 4f       	sbci	r17, 0xFF	; 255
    17fe:	bc 01       	movw	r22, r24
    1800:	cd 01       	movw	r24, r26
    1802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	f8 01       	movw	r30, r16
    180c:	91 83       	std	Z+1, r25	; 0x01
    180e:	80 83       	st	Z, r24
    1810:	1f c0       	rjmp	.+62     	; 0x1850 <main+0xac0>
    1812:	fe 01       	movw	r30, r28
    1814:	e7 5b       	subi	r30, 0xB7	; 183
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	88 ec       	ldi	r24, 0xC8	; 200
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	91 83       	std	Z+1, r25	; 0x01
    181e:	80 83       	st	Z, r24
    1820:	fe 01       	movw	r30, r28
    1822:	e7 5b       	subi	r30, 0xB7	; 183
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	80 81       	ld	r24, Z
    1828:	91 81       	ldd	r25, Z+1	; 0x01
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	f1 f7       	brne	.-4      	; 0x182a <main+0xa9a>
    182e:	fe 01       	movw	r30, r28
    1830:	e7 5b       	subi	r30, 0xB7	; 183
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	91 83       	std	Z+1, r25	; 0x01
    1836:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1838:	de 01       	movw	r26, r28
    183a:	a5 5b       	subi	r26, 0xB5	; 181
    183c:	bf 4f       	sbci	r27, 0xFF	; 255
    183e:	fe 01       	movw	r30, r28
    1840:	e5 5b       	subi	r30, 0xB5	; 181
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	80 81       	ld	r24, Z
    1846:	91 81       	ldd	r25, Z+1	; 0x01
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	11 96       	adiw	r26, 0x01	; 1
    184c:	9c 93       	st	X, r25
    184e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1850:	fe 01       	movw	r30, r28
    1852:	e5 5b       	subi	r30, 0xB5	; 181
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	80 81       	ld	r24, Z
    1858:	91 81       	ldd	r25, Z+1	; 0x01
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	d1 f6       	brne	.-76     	; 0x1812 <main+0xa82>
    185e:	27 c0       	rjmp	.+78     	; 0x18ae <main+0xb1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1860:	8e 01       	movw	r16, r28
    1862:	05 5b       	subi	r16, 0xB5	; 181
    1864:	1f 4f       	sbci	r17, 0xFF	; 255
    1866:	fe 01       	movw	r30, r28
    1868:	e3 5b       	subi	r30, 0xB3	; 179
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	60 81       	ld	r22, Z
    186e:	71 81       	ldd	r23, Z+1	; 0x01
    1870:	82 81       	ldd	r24, Z+2	; 0x02
    1872:	93 81       	ldd	r25, Z+3	; 0x03
    1874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	f8 01       	movw	r30, r16
    187e:	91 83       	std	Z+1, r25	; 0x01
    1880:	80 83       	st	Z, r24
    1882:	de 01       	movw	r26, r28
    1884:	a9 5b       	subi	r26, 0xB9	; 185
    1886:	bf 4f       	sbci	r27, 0xFF	; 255
    1888:	fe 01       	movw	r30, r28
    188a:	e5 5b       	subi	r30, 0xB5	; 181
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 81       	ld	r24, Z
    1890:	91 81       	ldd	r25, Z+1	; 0x01
    1892:	8d 93       	st	X+, r24
    1894:	9c 93       	st	X, r25
    1896:	fe 01       	movw	r30, r28
    1898:	e9 5b       	subi	r30, 0xB9	; 185
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	80 81       	ld	r24, Z
    189e:	91 81       	ldd	r25, Z+1	; 0x01
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <main+0xb10>
    18a4:	fe 01       	movw	r30, r28
    18a6:	e9 5b       	subi	r30, 0xB9	; 185
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	91 83       	std	Z+1, r25	; 0x01
    18ac:	80 83       	st	Z, r24
			_delay_ms(3000);
			DcMotor_Rotate(CCW);
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
    18b4:	fe 01       	movw	r30, r28
    18b6:	ed 5b       	subi	r30, 0xBD	; 189
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e8       	ldi	r25, 0x80	; 128
    18be:	ab eb       	ldi	r26, 0xBB	; 187
    18c0:	b5 e4       	ldi	r27, 0x45	; 69
    18c2:	80 83       	st	Z, r24
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	a2 83       	std	Z+2, r26	; 0x02
    18c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ca:	8e 01       	movw	r16, r28
    18cc:	01 5c       	subi	r16, 0xC1	; 193
    18ce:	1f 4f       	sbci	r17, 0xFF	; 255
    18d0:	fe 01       	movw	r30, r28
    18d2:	ed 5b       	subi	r30, 0xBD	; 189
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	60 81       	ld	r22, Z
    18d8:	71 81       	ldd	r23, Z+1	; 0x01
    18da:	82 81       	ldd	r24, Z+2	; 0x02
    18dc:	93 81       	ldd	r25, Z+3	; 0x03
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	4a ef       	ldi	r20, 0xFA	; 250
    18e4:	54 e4       	ldi	r21, 0x44	; 68
    18e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	f8 01       	movw	r30, r16
    18f0:	80 83       	st	Z, r24
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	a2 83       	std	Z+2, r26	; 0x02
    18f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18f8:	fe 01       	movw	r30, r28
    18fa:	ff 96       	adiw	r30, 0x3f	; 63
    18fc:	60 81       	ld	r22, Z
    18fe:	71 81       	ldd	r23, Z+1	; 0x01
    1900:	82 81       	ldd	r24, Z+2	; 0x02
    1902:	93 81       	ldd	r25, Z+3	; 0x03
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e8       	ldi	r20, 0x80	; 128
    190a:	5f e3       	ldi	r21, 0x3F	; 63
    190c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1910:	88 23       	and	r24, r24
    1912:	2c f4       	brge	.+10     	; 0x191e <main+0xb8e>
		__ticks = 1;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9e af       	std	Y+62, r25	; 0x3e
    191a:	8d af       	std	Y+61, r24	; 0x3d
    191c:	46 c0       	rjmp	.+140    	; 0x19aa <main+0xc1a>
	else if (__tmp > 65535)
    191e:	fe 01       	movw	r30, r28
    1920:	ff 96       	adiw	r30, 0x3f	; 63
    1922:	60 81       	ld	r22, Z
    1924:	71 81       	ldd	r23, Z+1	; 0x01
    1926:	82 81       	ldd	r24, Z+2	; 0x02
    1928:	93 81       	ldd	r25, Z+3	; 0x03
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	3f ef       	ldi	r19, 0xFF	; 255
    192e:	4f e7       	ldi	r20, 0x7F	; 127
    1930:	57 e4       	ldi	r21, 0x47	; 71
    1932:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1936:	18 16       	cp	r1, r24
    1938:	64 f5       	brge	.+88     	; 0x1992 <main+0xc02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    193a:	fe 01       	movw	r30, r28
    193c:	ed 5b       	subi	r30, 0xBD	; 189
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	60 81       	ld	r22, Z
    1942:	71 81       	ldd	r23, Z+1	; 0x01
    1944:	82 81       	ldd	r24, Z+2	; 0x02
    1946:	93 81       	ldd	r25, Z+3	; 0x03
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	40 e2       	ldi	r20, 0x20	; 32
    194e:	51 e4       	ldi	r21, 0x41	; 65
    1950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	bc 01       	movw	r22, r24
    195a:	cd 01       	movw	r24, r26
    195c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	9e af       	std	Y+62, r25	; 0x3e
    1966:	8d af       	std	Y+61, r24	; 0x3d
    1968:	0f c0       	rjmp	.+30     	; 0x1988 <main+0xbf8>
    196a:	88 ec       	ldi	r24, 0xC8	; 200
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	9c af       	std	Y+60, r25	; 0x3c
    1970:	8b af       	std	Y+59, r24	; 0x3b
    1972:	8b ad       	ldd	r24, Y+59	; 0x3b
    1974:	9c ad       	ldd	r25, Y+60	; 0x3c
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	f1 f7       	brne	.-4      	; 0x1976 <main+0xbe6>
    197a:	9c af       	std	Y+60, r25	; 0x3c
    197c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    197e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1980:	9e ad       	ldd	r25, Y+62	; 0x3e
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	9e af       	std	Y+62, r25	; 0x3e
    1986:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1988:	8d ad       	ldd	r24, Y+61	; 0x3d
    198a:	9e ad       	ldd	r25, Y+62	; 0x3e
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	69 f7       	brne	.-38     	; 0x196a <main+0xbda>
    1990:	16 c0       	rjmp	.+44     	; 0x19be <main+0xc2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1992:	fe 01       	movw	r30, r28
    1994:	ff 96       	adiw	r30, 0x3f	; 63
    1996:	60 81       	ld	r22, Z
    1998:	71 81       	ldd	r23, Z+1	; 0x01
    199a:	82 81       	ldd	r24, Z+2	; 0x02
    199c:	93 81       	ldd	r25, Z+3	; 0x03
    199e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	9e af       	std	Y+62, r25	; 0x3e
    19a8:	8d af       	std	Y+61, r24	; 0x3d
    19aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    19ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ae:	9a af       	std	Y+58, r25	; 0x3a
    19b0:	89 af       	std	Y+57, r24	; 0x39
    19b2:	89 ad       	ldd	r24, Y+57	; 0x39
    19b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	f1 f7       	brne	.-4      	; 0x19b6 <main+0xc26>
    19ba:	9a af       	std	Y+58, r25	; 0x3a
    19bc:	89 af       	std	Y+57, r24	; 0x39
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e8       	ldi	r25, 0x80	; 128
    19c2:	ab eb       	ldi	r26, 0xBB	; 187
    19c4:	b5 e4       	ldi	r27, 0x45	; 69
    19c6:	8d ab       	std	Y+53, r24	; 0x35
    19c8:	9e ab       	std	Y+54, r25	; 0x36
    19ca:	af ab       	std	Y+55, r26	; 0x37
    19cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ce:	6d a9       	ldd	r22, Y+53	; 0x35
    19d0:	7e a9       	ldd	r23, Y+54	; 0x36
    19d2:	8f a9       	ldd	r24, Y+55	; 0x37
    19d4:	98 ad       	ldd	r25, Y+56	; 0x38
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	4a ef       	ldi	r20, 0xFA	; 250
    19dc:	54 e4       	ldi	r21, 0x44	; 68
    19de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	89 ab       	std	Y+49, r24	; 0x31
    19e8:	9a ab       	std	Y+50, r25	; 0x32
    19ea:	ab ab       	std	Y+51, r26	; 0x33
    19ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19ee:	69 a9       	ldd	r22, Y+49	; 0x31
    19f0:	7a a9       	ldd	r23, Y+50	; 0x32
    19f2:	8b a9       	ldd	r24, Y+51	; 0x33
    19f4:	9c a9       	ldd	r25, Y+52	; 0x34
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e8       	ldi	r20, 0x80	; 128
    19fc:	5f e3       	ldi	r21, 0x3F	; 63
    19fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a02:	88 23       	and	r24, r24
    1a04:	2c f4       	brge	.+10     	; 0x1a10 <main+0xc80>
		__ticks = 1;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	98 ab       	std	Y+48, r25	; 0x30
    1a0c:	8f a7       	std	Y+47, r24	; 0x2f
    1a0e:	3f c0       	rjmp	.+126    	; 0x1a8e <main+0xcfe>
	else if (__tmp > 65535)
    1a10:	69 a9       	ldd	r22, Y+49	; 0x31
    1a12:	7a a9       	ldd	r23, Y+50	; 0x32
    1a14:	8b a9       	ldd	r24, Y+51	; 0x33
    1a16:	9c a9       	ldd	r25, Y+52	; 0x34
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	3f ef       	ldi	r19, 0xFF	; 255
    1a1c:	4f e7       	ldi	r20, 0x7F	; 127
    1a1e:	57 e4       	ldi	r21, 0x47	; 71
    1a20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a24:	18 16       	cp	r1, r24
    1a26:	4c f5       	brge	.+82     	; 0x1a7a <main+0xcea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a28:	6d a9       	ldd	r22, Y+53	; 0x35
    1a2a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a2c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a2e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e2       	ldi	r20, 0x20	; 32
    1a36:	51 e4       	ldi	r21, 0x41	; 65
    1a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	98 ab       	std	Y+48, r25	; 0x30
    1a4e:	8f a7       	std	Y+47, r24	; 0x2f
    1a50:	0f c0       	rjmp	.+30     	; 0x1a70 <main+0xce0>
    1a52:	88 ec       	ldi	r24, 0xC8	; 200
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	9e a7       	std	Y+46, r25	; 0x2e
    1a58:	8d a7       	std	Y+45, r24	; 0x2d
    1a5a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a5c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <main+0xcce>
    1a62:	9e a7       	std	Y+46, r25	; 0x2e
    1a64:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a68:	98 a9       	ldd	r25, Y+48	; 0x30
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	98 ab       	std	Y+48, r25	; 0x30
    1a6e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a70:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a72:	98 a9       	ldd	r25, Y+48	; 0x30
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	69 f7       	brne	.-38     	; 0x1a52 <main+0xcc2>
    1a78:	14 c0       	rjmp	.+40     	; 0x1aa2 <main+0xd12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a80:	9c a9       	ldd	r25, Y+52	; 0x34
    1a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	98 ab       	std	Y+48, r25	; 0x30
    1a8c:	8f a7       	std	Y+47, r24	; 0x2f
    1a8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a90:	98 a9       	ldd	r25, Y+48	; 0x30
    1a92:	9c a7       	std	Y+44, r25	; 0x2c
    1a94:	8b a7       	std	Y+43, r24	; 0x2b
    1a96:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a98:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <main+0xd0a>
    1a9e:	9c a7       	std	Y+44, r25	; 0x2c
    1aa0:	8b a7       	std	Y+43, r24	; 0x2b
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	aa e7       	ldi	r26, 0x7A	; 122
    1aa8:	b4 e4       	ldi	r27, 0x44	; 68
    1aaa:	8f a3       	std	Y+39, r24	; 0x27
    1aac:	98 a7       	std	Y+40, r25	; 0x28
    1aae:	a9 a7       	std	Y+41, r26	; 0x29
    1ab0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ab4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ab6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ab8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	4a ef       	ldi	r20, 0xFA	; 250
    1ac0:	54 e4       	ldi	r21, 0x44	; 68
    1ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	8b a3       	std	Y+35, r24	; 0x23
    1acc:	9c a3       	std	Y+36, r25	; 0x24
    1ace:	ad a3       	std	Y+37, r26	; 0x25
    1ad0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ad2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad8:	9e a1       	ldd	r25, Y+38	; 0x26
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e8       	ldi	r20, 0x80	; 128
    1ae0:	5f e3       	ldi	r21, 0x3F	; 63
    1ae2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae6:	88 23       	and	r24, r24
    1ae8:	2c f4       	brge	.+10     	; 0x1af4 <main+0xd64>
		__ticks = 1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	9a a3       	std	Y+34, r25	; 0x22
    1af0:	89 a3       	std	Y+33, r24	; 0x21
    1af2:	3f c0       	rjmp	.+126    	; 0x1b72 <main+0xde2>
	else if (__tmp > 65535)
    1af4:	6b a1       	ldd	r22, Y+35	; 0x23
    1af6:	7c a1       	ldd	r23, Y+36	; 0x24
    1af8:	8d a1       	ldd	r24, Y+37	; 0x25
    1afa:	9e a1       	ldd	r25, Y+38	; 0x26
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	3f ef       	ldi	r19, 0xFF	; 255
    1b00:	4f e7       	ldi	r20, 0x7F	; 127
    1b02:	57 e4       	ldi	r21, 0x47	; 71
    1b04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b08:	18 16       	cp	r1, r24
    1b0a:	4c f5       	brge	.+82     	; 0x1b5e <main+0xdce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b0e:	78 a5       	ldd	r23, Y+40	; 0x28
    1b10:	89 a5       	ldd	r24, Y+41	; 0x29
    1b12:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e2       	ldi	r20, 0x20	; 32
    1b1a:	51 e4       	ldi	r21, 0x41	; 65
    1b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	9a a3       	std	Y+34, r25	; 0x22
    1b32:	89 a3       	std	Y+33, r24	; 0x21
    1b34:	0f c0       	rjmp	.+30     	; 0x1b54 <main+0xdc4>
    1b36:	88 ec       	ldi	r24, 0xC8	; 200
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	98 a3       	std	Y+32, r25	; 0x20
    1b3c:	8f 8f       	std	Y+31, r24	; 0x1f
    1b3e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b40:	98 a1       	ldd	r25, Y+32	; 0x20
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <main+0xdb2>
    1b46:	98 a3       	std	Y+32, r25	; 0x20
    1b48:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b4c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	9a a3       	std	Y+34, r25	; 0x22
    1b52:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b54:	89 a1       	ldd	r24, Y+33	; 0x21
    1b56:	9a a1       	ldd	r25, Y+34	; 0x22
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	69 f7       	brne	.-38     	; 0x1b36 <main+0xda6>
    1b5c:	14 c0       	rjmp	.+40     	; 0x1b86 <main+0xdf6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b60:	7c a1       	ldd	r23, Y+36	; 0x24
    1b62:	8d a1       	ldd	r24, Y+37	; 0x25
    1b64:	9e a1       	ldd	r25, Y+38	; 0x26
    1b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	9a a3       	std	Y+34, r25	; 0x22
    1b70:	89 a3       	std	Y+33, r24	; 0x21
    1b72:	89 a1       	ldd	r24, Y+33	; 0x21
    1b74:	9a a1       	ldd	r25, Y+34	; 0x22
    1b76:	9e 8f       	std	Y+30, r25	; 0x1e
    1b78:	8d 8f       	std	Y+29, r24	; 0x1d
    1b7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b7c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <main+0xdee>
    1b82:	9e 8f       	std	Y+30, r25	; 0x1e
    1b84:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(6000);
			_delay_ms(6000);
			_delay_ms(1000);
			DcMotor_Rotate(STOP);
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
			UART_sendByte(doors_opened_and_closed);
    1b8c:	87 e2       	ldi	r24, 0x27	; 39
    1b8e:	0e 94 69 14 	call	0x28d2	; 0x28d2 <UART_sendByte>
		}
		/*---------------------------------------------------------------------------------------*/
		if(check_byte==are_you_ready_to_sound_alarm)
    1b92:	fe 01       	movw	r30, r28
    1b94:	e5 56       	subi	r30, 0x65	; 101
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	80 81       	ld	r24, Z
    1b9a:	85 36       	cpi	r24, 0x65	; 101
    1b9c:	19 f4       	brne	.+6      	; 0x1ba4 <main+0xe14>
		{
			UART_sendByte(ready_to_sound_alarm);
    1b9e:	86 e6       	ldi	r24, 0x66	; 102
    1ba0:	0e 94 69 14 	call	0x28d2	; 0x28d2 <UART_sendByte>
		}

		if(check_byte==sound_the_alarm)
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	e5 56       	subi	r30, 0x65	; 101
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	80 81       	ld	r24, Z
    1bac:	87 36       	cpi	r24, 0x67	; 103
    1bae:	09 f0       	breq	.+2      	; 0x1bb2 <main+0xe22>
    1bb0:	8e c0       	rjmp	.+284    	; 0x1cce <main+0xf3e>
		{
			BUZZER_on();
    1bb2:	0e 94 af 05 	call	0xb5e	; 0xb5e <BUZZER_on>
			for(i=0;i<60;i++)
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	e4 56       	subi	r30, 0x64	; 100
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	10 82       	st	Z, r1
    1bbe:	7b c0       	rjmp	.+246    	; 0x1cb6 <main+0xf26>
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	aa e7       	ldi	r26, 0x7A	; 122
    1bc6:	b4 e4       	ldi	r27, 0x44	; 68
    1bc8:	89 8f       	std	Y+25, r24	; 0x19
    1bca:	9a 8f       	std	Y+26, r25	; 0x1a
    1bcc:	ab 8f       	std	Y+27, r26	; 0x1b
    1bce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd0:	69 8d       	ldd	r22, Y+25	; 0x19
    1bd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	4a ef       	ldi	r20, 0xFA	; 250
    1bde:	54 e4       	ldi	r21, 0x44	; 68
    1be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	8d 8b       	std	Y+21, r24	; 0x15
    1bea:	9e 8b       	std	Y+22, r25	; 0x16
    1bec:	af 8b       	std	Y+23, r26	; 0x17
    1bee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bf0:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf2:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e8       	ldi	r20, 0x80	; 128
    1bfe:	5f e3       	ldi	r21, 0x3F	; 63
    1c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c04:	88 23       	and	r24, r24
    1c06:	2c f4       	brge	.+10     	; 0x1c12 <main+0xe82>
		__ticks = 1;
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	9c 8b       	std	Y+20, r25	; 0x14
    1c0e:	8b 8b       	std	Y+19, r24	; 0x13
    1c10:	3f c0       	rjmp	.+126    	; 0x1c90 <main+0xf00>
	else if (__tmp > 65535)
    1c12:	6d 89       	ldd	r22, Y+21	; 0x15
    1c14:	7e 89       	ldd	r23, Y+22	; 0x16
    1c16:	8f 89       	ldd	r24, Y+23	; 0x17
    1c18:	98 8d       	ldd	r25, Y+24	; 0x18
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	3f ef       	ldi	r19, 0xFF	; 255
    1c1e:	4f e7       	ldi	r20, 0x7F	; 127
    1c20:	57 e4       	ldi	r21, 0x47	; 71
    1c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c26:	18 16       	cp	r1, r24
    1c28:	4c f5       	brge	.+82     	; 0x1c7c <main+0xeec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e2       	ldi	r20, 0x20	; 32
    1c38:	51 e4       	ldi	r21, 0x41	; 65
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	bc 01       	movw	r22, r24
    1c44:	cd 01       	movw	r24, r26
    1c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	9c 8b       	std	Y+20, r25	; 0x14
    1c50:	8b 8b       	std	Y+19, r24	; 0x13
    1c52:	0f c0       	rjmp	.+30     	; 0x1c72 <main+0xee2>
    1c54:	88 ec       	ldi	r24, 0xC8	; 200
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	9a 8b       	std	Y+18, r25	; 0x12
    1c5a:	89 8b       	std	Y+17, r24	; 0x11
    1c5c:	89 89       	ldd	r24, Y+17	; 0x11
    1c5e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <main+0xed0>
    1c64:	9a 8b       	std	Y+18, r25	; 0x12
    1c66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c68:	8b 89       	ldd	r24, Y+19	; 0x13
    1c6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	9c 8b       	std	Y+20, r25	; 0x14
    1c70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c72:	8b 89       	ldd	r24, Y+19	; 0x13
    1c74:	9c 89       	ldd	r25, Y+20	; 0x14
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	69 f7       	brne	.-38     	; 0x1c54 <main+0xec4>
    1c7a:	14 c0       	rjmp	.+40     	; 0x1ca4 <main+0xf14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c80:	8f 89       	ldd	r24, Y+23	; 0x17
    1c82:	98 8d       	ldd	r25, Y+24	; 0x18
    1c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	9c 8b       	std	Y+20, r25	; 0x14
    1c8e:	8b 8b       	std	Y+19, r24	; 0x13
    1c90:	8b 89       	ldd	r24, Y+19	; 0x13
    1c92:	9c 89       	ldd	r25, Y+20	; 0x14
    1c94:	98 8b       	std	Y+16, r25	; 0x10
    1c96:	8f 87       	std	Y+15, r24	; 0x0f
    1c98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c9a:	98 89       	ldd	r25, Y+16	; 0x10
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <main+0xf0c>
    1ca0:	98 8b       	std	Y+16, r25	; 0x10
    1ca2:	8f 87       	std	Y+15, r24	; 0x0f
    1ca4:	de 01       	movw	r26, r28
    1ca6:	a4 56       	subi	r26, 0x64	; 100
    1ca8:	bf 4f       	sbci	r27, 0xFF	; 255
    1caa:	fe 01       	movw	r30, r28
    1cac:	e4 56       	subi	r30, 0x64	; 100
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	80 81       	ld	r24, Z
    1cb2:	8f 5f       	subi	r24, 0xFF	; 255
    1cb4:	8c 93       	st	X, r24
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e4 56       	subi	r30, 0x64	; 100
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	80 81       	ld	r24, Z
    1cbe:	8c 33       	cpi	r24, 0x3C	; 60
    1cc0:	08 f4       	brcc	.+2      	; 0x1cc4 <main+0xf34>
    1cc2:	7e cf       	rjmp	.-260    	; 0x1bc0 <main+0xe30>
			{
				_delay_ms(1000);

			}
			BUZZER_off();
    1cc4:	0e 94 bb 05 	call	0xb76	; 0xb76 <BUZZER_off>
			UART_sendByte(buzzer_ended);
    1cc8:	88 e6       	ldi	r24, 0x68	; 104
    1cca:	0e 94 69 14 	call	0x28d2	; 0x28d2 <UART_sendByte>
		}
/*---------------------------------------------------------------------------------------*/
		if(check_byte==are_you_ready_to_change_password)
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e5 56       	subi	r30, 0x65	; 101
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	80 81       	ld	r24, Z
    1cd6:	89 36       	cpi	r24, 0x69	; 105
    1cd8:	09 f0       	breq	.+2      	; 0x1cdc <main+0xf4c>
    1cda:	d6 c8       	rjmp	.-3668   	; 0xe88 <main+0xf8>
		{
			for(i=0;i<4;i++)
    1cdc:	fe 01       	movw	r30, r28
    1cde:	e4 56       	subi	r30, 0x64	; 100
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	10 82       	st	Z, r1
    1ce4:	9a c0       	rjmp	.+308    	; 0x1e1a <main+0x108a>
			{
				EEPROM_readByte(adresses[i],&password_check[i]);
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	e4 56       	subi	r30, 0x64	; 100
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	80 81       	ld	r24, Z
    1cee:	88 2f       	mov	r24, r24
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	9e 01       	movw	r18, r28
    1cf4:	23 55       	subi	r18, 0x53	; 83
    1cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	f9 01       	movw	r30, r18
    1cfe:	e8 0f       	add	r30, r24
    1d00:	f9 1f       	adc	r31, r25
    1d02:	40 81       	ld	r20, Z
    1d04:	51 81       	ldd	r21, Z+1	; 0x01
    1d06:	fe 01       	movw	r30, r28
    1d08:	e4 56       	subi	r30, 0x64	; 100
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	80 81       	ld	r24, Z
    1d0e:	88 2f       	mov	r24, r24
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9e 01       	movw	r18, r28
    1d14:	2b 55       	subi	r18, 0x5B	; 91
    1d16:	3f 4f       	sbci	r19, 0xFF	; 255
    1d18:	28 0f       	add	r18, r24
    1d1a:	39 1f       	adc	r19, r25
    1d1c:	ca 01       	movw	r24, r20
    1d1e:	b9 01       	movw	r22, r18
    1d20:	0e 94 68 06 	call	0xcd0	; 0xcd0 <EEPROM_readByte>
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	a0 e2       	ldi	r26, 0x20	; 32
    1d2a:	b1 e4       	ldi	r27, 0x41	; 65
    1d2c:	8b 87       	std	Y+11, r24	; 0x0b
    1d2e:	9c 87       	std	Y+12, r25	; 0x0c
    1d30:	ad 87       	std	Y+13, r26	; 0x0d
    1d32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	4a ef       	ldi	r20, 0xFA	; 250
    1d42:	54 e4       	ldi	r21, 0x44	; 68
    1d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	8f 83       	std	Y+7, r24	; 0x07
    1d4e:	98 87       	std	Y+8, r25	; 0x08
    1d50:	a9 87       	std	Y+9, r26	; 0x09
    1d52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d54:	6f 81       	ldd	r22, Y+7	; 0x07
    1d56:	78 85       	ldd	r23, Y+8	; 0x08
    1d58:	89 85       	ldd	r24, Y+9	; 0x09
    1d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e8       	ldi	r20, 0x80	; 128
    1d62:	5f e3       	ldi	r21, 0x3F	; 63
    1d64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d68:	88 23       	and	r24, r24
    1d6a:	2c f4       	brge	.+10     	; 0x1d76 <main+0xfe6>
		__ticks = 1;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	9e 83       	std	Y+6, r25	; 0x06
    1d72:	8d 83       	std	Y+5, r24	; 0x05
    1d74:	3f c0       	rjmp	.+126    	; 0x1df4 <main+0x1064>
	else if (__tmp > 65535)
    1d76:	6f 81       	ldd	r22, Y+7	; 0x07
    1d78:	78 85       	ldd	r23, Y+8	; 0x08
    1d7a:	89 85       	ldd	r24, Y+9	; 0x09
    1d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	3f ef       	ldi	r19, 0xFF	; 255
    1d82:	4f e7       	ldi	r20, 0x7F	; 127
    1d84:	57 e4       	ldi	r21, 0x47	; 71
    1d86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d8a:	18 16       	cp	r1, r24
    1d8c:	4c f5       	brge	.+82     	; 0x1de0 <main+0x1050>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	40 e2       	ldi	r20, 0x20	; 32
    1d9c:	51 e4       	ldi	r21, 0x41	; 65
    1d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	bc 01       	movw	r22, r24
    1da8:	cd 01       	movw	r24, r26
    1daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	9e 83       	std	Y+6, r25	; 0x06
    1db4:	8d 83       	std	Y+5, r24	; 0x05
    1db6:	0f c0       	rjmp	.+30     	; 0x1dd6 <main+0x1046>
    1db8:	88 ec       	ldi	r24, 0xC8	; 200
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	9c 83       	std	Y+4, r25	; 0x04
    1dbe:	8b 83       	std	Y+3, r24	; 0x03
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <main+0x1034>
    1dc8:	9c 83       	std	Y+4, r25	; 0x04
    1dca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dce:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	9e 83       	std	Y+6, r25	; 0x06
    1dd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dda:	00 97       	sbiw	r24, 0x00	; 0
    1ddc:	69 f7       	brne	.-38     	; 0x1db8 <main+0x1028>
    1dde:	14 c0       	rjmp	.+40     	; 0x1e08 <main+0x1078>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de0:	6f 81       	ldd	r22, Y+7	; 0x07
    1de2:	78 85       	ldd	r23, Y+8	; 0x08
    1de4:	89 85       	ldd	r24, Y+9	; 0x09
    1de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	9e 83       	std	Y+6, r25	; 0x06
    1df2:	8d 83       	std	Y+5, r24	; 0x05
    1df4:	8d 81       	ldd	r24, Y+5	; 0x05
    1df6:	9e 81       	ldd	r25, Y+6	; 0x06
    1df8:	9a 83       	std	Y+2, r25	; 0x02
    1dfa:	89 83       	std	Y+1, r24	; 0x01
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	f1 f7       	brne	.-4      	; 0x1e00 <main+0x1070>
    1e04:	9a 83       	std	Y+2, r25	; 0x02
    1e06:	89 83       	std	Y+1, r24	; 0x01
			UART_sendByte(buzzer_ended);
		}
/*---------------------------------------------------------------------------------------*/
		if(check_byte==are_you_ready_to_change_password)
		{
			for(i=0;i<4;i++)
    1e08:	de 01       	movw	r26, r28
    1e0a:	a4 56       	subi	r26, 0x64	; 100
    1e0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e0e:	fe 01       	movw	r30, r28
    1e10:	e4 56       	subi	r30, 0x64	; 100
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	80 81       	ld	r24, Z
    1e16:	8f 5f       	subi	r24, 0xFF	; 255
    1e18:	8c 93       	st	X, r24
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e4 56       	subi	r30, 0x64	; 100
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	80 81       	ld	r24, Z
    1e22:	84 30       	cpi	r24, 0x04	; 4
    1e24:	08 f4       	brcc	.+2      	; 0x1e28 <main+0x1098>
    1e26:	5f cf       	rjmp	.-322    	; 0x1ce6 <main+0xf56>
			{
				EEPROM_readByte(adresses[i],&password_check[i]);
				_delay_ms(10);
			}
			UART_sendByte(ready_to_change_password);
    1e28:	8a e6       	ldi	r24, 0x6A	; 106
    1e2a:	0e 94 69 14 	call	0x28d2	; 0x28d2 <UART_sendByte>
			UART_receiveString(password);
    1e2e:	ce 01       	movw	r24, r28
    1e30:	83 56       	subi	r24, 0x63	; 99
    1e32:	9f 4f       	sbci	r25, 0xFF	; 255
    1e34:	0e 94 b8 14 	call	0x2970	; 0x2970 <UART_receiveString>
			for(i=0;i<4;i++)
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e4 56       	subi	r30, 0x64	; 100
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	10 82       	st	Z, r1
    1e40:	33 c0       	rjmp	.+102    	; 0x1ea8 <main+0x1118>
			{
				if(password[i]!=password_check[i])
    1e42:	fe 01       	movw	r30, r28
    1e44:	e4 56       	subi	r30, 0x64	; 100
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	80 81       	ld	r24, Z
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	ce 01       	movw	r24, r28
    1e50:	83 56       	subi	r24, 0x63	; 99
    1e52:	9f 4f       	sbci	r25, 0xFF	; 255
    1e54:	fc 01       	movw	r30, r24
    1e56:	e2 0f       	add	r30, r18
    1e58:	f3 1f       	adc	r31, r19
    1e5a:	40 81       	ld	r20, Z
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e4 56       	subi	r30, 0x64	; 100
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	80 81       	ld	r24, Z
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	ce 01       	movw	r24, r28
    1e6a:	8b 55       	subi	r24, 0x5B	; 91
    1e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6e:	fc 01       	movw	r30, r24
    1e70:	e2 0f       	add	r30, r18
    1e72:	f3 1f       	adc	r31, r19
    1e74:	80 81       	ld	r24, Z
    1e76:	48 17       	cp	r20, r24
    1e78:	29 f0       	breq	.+10     	; 0x1e84 <main+0x10f4>
				{
					UART_sendByte(unconfirmed);
    1e7a:	83 e2       	ldi	r24, 0x23	; 35
    1e7c:	0e 94 69 14 	call	0x28d2	; 0x28d2 <UART_sendByte>
    1e80:	0c 94 44 07 	jmp	0xe88	; 0xe88 <main+0xf8>
					break;
				}
				else
				{
					if(i==3)
    1e84:	fe 01       	movw	r30, r28
    1e86:	e4 56       	subi	r30, 0x64	; 100
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	80 81       	ld	r24, Z
    1e8c:	83 30       	cpi	r24, 0x03	; 3
    1e8e:	19 f4       	brne	.+6      	; 0x1e96 <main+0x1106>
					{
						UART_sendByte(confirmed);
    1e90:	82 e2       	ldi	r24, 0x22	; 34
    1e92:	0e 94 69 14 	call	0x28d2	; 0x28d2 <UART_sendByte>
				EEPROM_readByte(adresses[i],&password_check[i]);
				_delay_ms(10);
			}
			UART_sendByte(ready_to_change_password);
			UART_receiveString(password);
			for(i=0;i<4;i++)
    1e96:	de 01       	movw	r26, r28
    1e98:	a4 56       	subi	r26, 0x64	; 100
    1e9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	e4 56       	subi	r30, 0x64	; 100
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	80 81       	ld	r24, Z
    1ea4:	8f 5f       	subi	r24, 0xFF	; 255
    1ea6:	8c 93       	st	X, r24
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e4 56       	subi	r30, 0x64	; 100
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	80 81       	ld	r24, Z
    1eb0:	84 30       	cpi	r24, 0x04	; 4
    1eb2:	38 f2       	brcs	.-114    	; 0x1e42 <main+0x10b2>
    1eb4:	0c 94 44 07 	jmp	0xe88	; 0xe88 <main+0xf8>

00001eb8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <GPIO_setupPinDirection+0x6>
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <GPIO_setupPinDirection+0x8>
    1ec0:	0f 92       	push	r0
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	6a 83       	std	Y+2, r22	; 0x02
    1eca:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	88 30       	cpi	r24, 0x08	; 8
    1ed0:	08 f0       	brcs	.+2      	; 0x1ed4 <GPIO_setupPinDirection+0x1c>
    1ed2:	d5 c0       	rjmp	.+426    	; 0x207e <GPIO_setupPinDirection+0x1c6>
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	84 30       	cpi	r24, 0x04	; 4
    1ed8:	08 f0       	brcs	.+2      	; 0x1edc <GPIO_setupPinDirection+0x24>
    1eda:	d1 c0       	rjmp	.+418    	; 0x207e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	3d 83       	std	Y+5, r19	; 0x05
    1ee4:	2c 83       	std	Y+4, r18	; 0x04
    1ee6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eea:	81 30       	cpi	r24, 0x01	; 1
    1eec:	91 05       	cpc	r25, r1
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <GPIO_setupPinDirection+0x3a>
    1ef0:	43 c0       	rjmp	.+134    	; 0x1f78 <GPIO_setupPinDirection+0xc0>
    1ef2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ef4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ef6:	22 30       	cpi	r18, 0x02	; 2
    1ef8:	31 05       	cpc	r19, r1
    1efa:	2c f4       	brge	.+10     	; 0x1f06 <GPIO_setupPinDirection+0x4e>
    1efc:	8c 81       	ldd	r24, Y+4	; 0x04
    1efe:	9d 81       	ldd	r25, Y+5	; 0x05
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	71 f0       	breq	.+28     	; 0x1f20 <GPIO_setupPinDirection+0x68>
    1f04:	bc c0       	rjmp	.+376    	; 0x207e <GPIO_setupPinDirection+0x1c6>
    1f06:	2c 81       	ldd	r18, Y+4	; 0x04
    1f08:	3d 81       	ldd	r19, Y+5	; 0x05
    1f0a:	22 30       	cpi	r18, 0x02	; 2
    1f0c:	31 05       	cpc	r19, r1
    1f0e:	09 f4       	brne	.+2      	; 0x1f12 <GPIO_setupPinDirection+0x5a>
    1f10:	5f c0       	rjmp	.+190    	; 0x1fd0 <GPIO_setupPinDirection+0x118>
    1f12:	8c 81       	ldd	r24, Y+4	; 0x04
    1f14:	9d 81       	ldd	r25, Y+5	; 0x05
    1f16:	83 30       	cpi	r24, 0x03	; 3
    1f18:	91 05       	cpc	r25, r1
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <GPIO_setupPinDirection+0x66>
    1f1c:	85 c0       	rjmp	.+266    	; 0x2028 <GPIO_setupPinDirection+0x170>
    1f1e:	af c0       	rjmp	.+350    	; 0x207e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	81 30       	cpi	r24, 0x01	; 1
    1f24:	a1 f4       	brne	.+40     	; 0x1f4e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1f26:	aa e3       	ldi	r26, 0x3A	; 58
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	ea e3       	ldi	r30, 0x3A	; 58
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	48 2f       	mov	r20, r24
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	02 2e       	mov	r0, r18
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <GPIO_setupPinDirection+0x8c>
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	0a 94       	dec	r0
    1f46:	e2 f7       	brpl	.-8      	; 0x1f40 <GPIO_setupPinDirection+0x88>
    1f48:	84 2b       	or	r24, r20
    1f4a:	8c 93       	st	X, r24
    1f4c:	98 c0       	rjmp	.+304    	; 0x207e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1f4e:	aa e3       	ldi	r26, 0x3A	; 58
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	ea e3       	ldi	r30, 0x3A	; 58
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	48 2f       	mov	r20, r24
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	02 2e       	mov	r0, r18
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <GPIO_setupPinDirection+0xb4>
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	0a 94       	dec	r0
    1f6e:	e2 f7       	brpl	.-8      	; 0x1f68 <GPIO_setupPinDirection+0xb0>
    1f70:	80 95       	com	r24
    1f72:	84 23       	and	r24, r20
    1f74:	8c 93       	st	X, r24
    1f76:	83 c0       	rjmp	.+262    	; 0x207e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	81 30       	cpi	r24, 0x01	; 1
    1f7c:	a1 f4       	brne	.+40     	; 0x1fa6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1f7e:	a7 e3       	ldi	r26, 0x37	; 55
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e7 e3       	ldi	r30, 0x37	; 55
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	48 2f       	mov	r20, r24
    1f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	02 2e       	mov	r0, r18
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <GPIO_setupPinDirection+0xe4>
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	0a 94       	dec	r0
    1f9e:	e2 f7       	brpl	.-8      	; 0x1f98 <GPIO_setupPinDirection+0xe0>
    1fa0:	84 2b       	or	r24, r20
    1fa2:	8c 93       	st	X, r24
    1fa4:	6c c0       	rjmp	.+216    	; 0x207e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1fa6:	a7 e3       	ldi	r26, 0x37	; 55
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	e7 e3       	ldi	r30, 0x37	; 55
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	48 2f       	mov	r20, r24
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	02 2e       	mov	r0, r18
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <GPIO_setupPinDirection+0x10c>
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	0a 94       	dec	r0
    1fc6:	e2 f7       	brpl	.-8      	; 0x1fc0 <GPIO_setupPinDirection+0x108>
    1fc8:	80 95       	com	r24
    1fca:	84 23       	and	r24, r20
    1fcc:	8c 93       	st	X, r24
    1fce:	57 c0       	rjmp	.+174    	; 0x207e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	81 30       	cpi	r24, 0x01	; 1
    1fd4:	a1 f4       	brne	.+40     	; 0x1ffe <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1fd6:	a4 e3       	ldi	r26, 0x34	; 52
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e4 e3       	ldi	r30, 0x34	; 52
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	48 2f       	mov	r20, r24
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	02 2e       	mov	r0, r18
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <GPIO_setupPinDirection+0x13c>
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	0a 94       	dec	r0
    1ff6:	e2 f7       	brpl	.-8      	; 0x1ff0 <GPIO_setupPinDirection+0x138>
    1ff8:	84 2b       	or	r24, r20
    1ffa:	8c 93       	st	X, r24
    1ffc:	40 c0       	rjmp	.+128    	; 0x207e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1ffe:	a4 e3       	ldi	r26, 0x34	; 52
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e4 e3       	ldi	r30, 0x34	; 52
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	48 2f       	mov	r20, r24
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	02 2e       	mov	r0, r18
    2016:	02 c0       	rjmp	.+4      	; 0x201c <GPIO_setupPinDirection+0x164>
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	0a 94       	dec	r0
    201e:	e2 f7       	brpl	.-8      	; 0x2018 <GPIO_setupPinDirection+0x160>
    2020:	80 95       	com	r24
    2022:	84 23       	and	r24, r20
    2024:	8c 93       	st	X, r24
    2026:	2b c0       	rjmp	.+86     	; 0x207e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	81 30       	cpi	r24, 0x01	; 1
    202c:	a1 f4       	brne	.+40     	; 0x2056 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    202e:	a1 e3       	ldi	r26, 0x31	; 49
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e1 e3       	ldi	r30, 0x31	; 49
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	48 2f       	mov	r20, r24
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	02 2e       	mov	r0, r18
    2046:	02 c0       	rjmp	.+4      	; 0x204c <GPIO_setupPinDirection+0x194>
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	0a 94       	dec	r0
    204e:	e2 f7       	brpl	.-8      	; 0x2048 <GPIO_setupPinDirection+0x190>
    2050:	84 2b       	or	r24, r20
    2052:	8c 93       	st	X, r24
    2054:	14 c0       	rjmp	.+40     	; 0x207e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2056:	a1 e3       	ldi	r26, 0x31	; 49
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e1 e3       	ldi	r30, 0x31	; 49
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	48 2f       	mov	r20, r24
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	28 2f       	mov	r18, r24
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	02 2e       	mov	r0, r18
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <GPIO_setupPinDirection+0x1bc>
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	0a 94       	dec	r0
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <GPIO_setupPinDirection+0x1b8>
    2078:	80 95       	com	r24
    207a:	84 23       	and	r24, r20
    207c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	00 d0       	rcall	.+0      	; 0x2094 <GPIO_writePin+0x6>
    2094:	00 d0       	rcall	.+0      	; 0x2096 <GPIO_writePin+0x8>
    2096:	0f 92       	push	r0
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	6a 83       	std	Y+2, r22	; 0x02
    20a0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
    20a4:	88 30       	cpi	r24, 0x08	; 8
    20a6:	08 f0       	brcs	.+2      	; 0x20aa <GPIO_writePin+0x1c>
    20a8:	d5 c0       	rjmp	.+426    	; 0x2254 <GPIO_writePin+0x1c6>
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	84 30       	cpi	r24, 0x04	; 4
    20ae:	08 f0       	brcs	.+2      	; 0x20b2 <GPIO_writePin+0x24>
    20b0:	d1 c0       	rjmp	.+418    	; 0x2254 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	3d 83       	std	Y+5, r19	; 0x05
    20ba:	2c 83       	std	Y+4, r18	; 0x04
    20bc:	8c 81       	ldd	r24, Y+4	; 0x04
    20be:	9d 81       	ldd	r25, Y+5	; 0x05
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	91 05       	cpc	r25, r1
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <GPIO_writePin+0x3a>
    20c6:	43 c0       	rjmp	.+134    	; 0x214e <GPIO_writePin+0xc0>
    20c8:	2c 81       	ldd	r18, Y+4	; 0x04
    20ca:	3d 81       	ldd	r19, Y+5	; 0x05
    20cc:	22 30       	cpi	r18, 0x02	; 2
    20ce:	31 05       	cpc	r19, r1
    20d0:	2c f4       	brge	.+10     	; 0x20dc <GPIO_writePin+0x4e>
    20d2:	8c 81       	ldd	r24, Y+4	; 0x04
    20d4:	9d 81       	ldd	r25, Y+5	; 0x05
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	71 f0       	breq	.+28     	; 0x20f6 <GPIO_writePin+0x68>
    20da:	bc c0       	rjmp	.+376    	; 0x2254 <GPIO_writePin+0x1c6>
    20dc:	2c 81       	ldd	r18, Y+4	; 0x04
    20de:	3d 81       	ldd	r19, Y+5	; 0x05
    20e0:	22 30       	cpi	r18, 0x02	; 2
    20e2:	31 05       	cpc	r19, r1
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <GPIO_writePin+0x5a>
    20e6:	5f c0       	rjmp	.+190    	; 0x21a6 <GPIO_writePin+0x118>
    20e8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ea:	9d 81       	ldd	r25, Y+5	; 0x05
    20ec:	83 30       	cpi	r24, 0x03	; 3
    20ee:	91 05       	cpc	r25, r1
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <GPIO_writePin+0x66>
    20f2:	85 c0       	rjmp	.+266    	; 0x21fe <GPIO_writePin+0x170>
    20f4:	af c0       	rjmp	.+350    	; 0x2254 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	81 30       	cpi	r24, 0x01	; 1
    20fa:	a1 f4       	brne	.+40     	; 0x2124 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    20fc:	ab e3       	ldi	r26, 0x3B	; 59
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	eb e3       	ldi	r30, 0x3B	; 59
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	48 2f       	mov	r20, r24
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	02 2e       	mov	r0, r18
    2114:	02 c0       	rjmp	.+4      	; 0x211a <GPIO_writePin+0x8c>
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	0a 94       	dec	r0
    211c:	e2 f7       	brpl	.-8      	; 0x2116 <GPIO_writePin+0x88>
    211e:	84 2b       	or	r24, r20
    2120:	8c 93       	st	X, r24
    2122:	98 c0       	rjmp	.+304    	; 0x2254 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2124:	ab e3       	ldi	r26, 0x3B	; 59
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	eb e3       	ldi	r30, 0x3B	; 59
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	48 2f       	mov	r20, r24
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	02 2e       	mov	r0, r18
    213c:	02 c0       	rjmp	.+4      	; 0x2142 <GPIO_writePin+0xb4>
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	0a 94       	dec	r0
    2144:	e2 f7       	brpl	.-8      	; 0x213e <GPIO_writePin+0xb0>
    2146:	80 95       	com	r24
    2148:	84 23       	and	r24, r20
    214a:	8c 93       	st	X, r24
    214c:	83 c0       	rjmp	.+262    	; 0x2254 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	81 30       	cpi	r24, 0x01	; 1
    2152:	a1 f4       	brne	.+40     	; 0x217c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2154:	a8 e3       	ldi	r26, 0x38	; 56
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e8 e3       	ldi	r30, 0x38	; 56
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	48 2f       	mov	r20, r24
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	02 2e       	mov	r0, r18
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <GPIO_writePin+0xe4>
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	0a 94       	dec	r0
    2174:	e2 f7       	brpl	.-8      	; 0x216e <GPIO_writePin+0xe0>
    2176:	84 2b       	or	r24, r20
    2178:	8c 93       	st	X, r24
    217a:	6c c0       	rjmp	.+216    	; 0x2254 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    217c:	a8 e3       	ldi	r26, 0x38	; 56
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e8 e3       	ldi	r30, 0x38	; 56
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	48 2f       	mov	r20, r24
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	02 2e       	mov	r0, r18
    2194:	02 c0       	rjmp	.+4      	; 0x219a <GPIO_writePin+0x10c>
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	0a 94       	dec	r0
    219c:	e2 f7       	brpl	.-8      	; 0x2196 <GPIO_writePin+0x108>
    219e:	80 95       	com	r24
    21a0:	84 23       	and	r24, r20
    21a2:	8c 93       	st	X, r24
    21a4:	57 c0       	rjmp	.+174    	; 0x2254 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	81 30       	cpi	r24, 0x01	; 1
    21aa:	a1 f4       	brne	.+40     	; 0x21d4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    21ac:	a5 e3       	ldi	r26, 0x35	; 53
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e5 e3       	ldi	r30, 0x35	; 53
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	48 2f       	mov	r20, r24
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	02 2e       	mov	r0, r18
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <GPIO_writePin+0x13c>
    21c6:	88 0f       	add	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	0a 94       	dec	r0
    21cc:	e2 f7       	brpl	.-8      	; 0x21c6 <GPIO_writePin+0x138>
    21ce:	84 2b       	or	r24, r20
    21d0:	8c 93       	st	X, r24
    21d2:	40 c0       	rjmp	.+128    	; 0x2254 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    21d4:	a5 e3       	ldi	r26, 0x35	; 53
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e5 e3       	ldi	r30, 0x35	; 53
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	48 2f       	mov	r20, r24
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	02 2e       	mov	r0, r18
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <GPIO_writePin+0x164>
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	0a 94       	dec	r0
    21f4:	e2 f7       	brpl	.-8      	; 0x21ee <GPIO_writePin+0x160>
    21f6:	80 95       	com	r24
    21f8:	84 23       	and	r24, r20
    21fa:	8c 93       	st	X, r24
    21fc:	2b c0       	rjmp	.+86     	; 0x2254 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	a1 f4       	brne	.+40     	; 0x222c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2204:	a2 e3       	ldi	r26, 0x32	; 50
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e2 e3       	ldi	r30, 0x32	; 50
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	48 2f       	mov	r20, r24
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	02 2e       	mov	r0, r18
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <GPIO_writePin+0x194>
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	0a 94       	dec	r0
    2224:	e2 f7       	brpl	.-8      	; 0x221e <GPIO_writePin+0x190>
    2226:	84 2b       	or	r24, r20
    2228:	8c 93       	st	X, r24
    222a:	14 c0       	rjmp	.+40     	; 0x2254 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    222c:	a2 e3       	ldi	r26, 0x32	; 50
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e2 e3       	ldi	r30, 0x32	; 50
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	48 2f       	mov	r20, r24
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	02 2e       	mov	r0, r18
    2244:	02 c0       	rjmp	.+4      	; 0x224a <GPIO_writePin+0x1bc>
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	0a 94       	dec	r0
    224c:	e2 f7       	brpl	.-8      	; 0x2246 <GPIO_writePin+0x1b8>
    224e:	80 95       	com	r24
    2250:	84 23       	and	r24, r20
    2252:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	00 d0       	rcall	.+0      	; 0x226a <GPIO_readPin+0x6>
    226a:	00 d0       	rcall	.+0      	; 0x226c <GPIO_readPin+0x8>
    226c:	0f 92       	push	r0
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	8a 83       	std	Y+2, r24	; 0x02
    2274:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2276:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	88 30       	cpi	r24, 0x08	; 8
    227c:	08 f0       	brcs	.+2      	; 0x2280 <GPIO_readPin+0x1c>
    227e:	84 c0       	rjmp	.+264    	; 0x2388 <GPIO_readPin+0x124>
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	84 30       	cpi	r24, 0x04	; 4
    2284:	08 f0       	brcs	.+2      	; 0x2288 <GPIO_readPin+0x24>
    2286:	80 c0       	rjmp	.+256    	; 0x2388 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	28 2f       	mov	r18, r24
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	3d 83       	std	Y+5, r19	; 0x05
    2290:	2c 83       	std	Y+4, r18	; 0x04
    2292:	4c 81       	ldd	r20, Y+4	; 0x04
    2294:	5d 81       	ldd	r21, Y+5	; 0x05
    2296:	41 30       	cpi	r20, 0x01	; 1
    2298:	51 05       	cpc	r21, r1
    229a:	79 f1       	breq	.+94     	; 0x22fa <GPIO_readPin+0x96>
    229c:	8c 81       	ldd	r24, Y+4	; 0x04
    229e:	9d 81       	ldd	r25, Y+5	; 0x05
    22a0:	82 30       	cpi	r24, 0x02	; 2
    22a2:	91 05       	cpc	r25, r1
    22a4:	34 f4       	brge	.+12     	; 0x22b2 <GPIO_readPin+0x4e>
    22a6:	2c 81       	ldd	r18, Y+4	; 0x04
    22a8:	3d 81       	ldd	r19, Y+5	; 0x05
    22aa:	21 15       	cp	r18, r1
    22ac:	31 05       	cpc	r19, r1
    22ae:	69 f0       	breq	.+26     	; 0x22ca <GPIO_readPin+0x66>
    22b0:	6b c0       	rjmp	.+214    	; 0x2388 <GPIO_readPin+0x124>
    22b2:	4c 81       	ldd	r20, Y+4	; 0x04
    22b4:	5d 81       	ldd	r21, Y+5	; 0x05
    22b6:	42 30       	cpi	r20, 0x02	; 2
    22b8:	51 05       	cpc	r21, r1
    22ba:	b9 f1       	breq	.+110    	; 0x232a <GPIO_readPin+0xc6>
    22bc:	8c 81       	ldd	r24, Y+4	; 0x04
    22be:	9d 81       	ldd	r25, Y+5	; 0x05
    22c0:	83 30       	cpi	r24, 0x03	; 3
    22c2:	91 05       	cpc	r25, r1
    22c4:	09 f4       	brne	.+2      	; 0x22c8 <GPIO_readPin+0x64>
    22c6:	49 c0       	rjmp	.+146    	; 0x235a <GPIO_readPin+0xf6>
    22c8:	5f c0       	rjmp	.+190    	; 0x2388 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    22ca:	e9 e3       	ldi	r30, 0x39	; 57
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	28 2f       	mov	r18, r24
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	88 2f       	mov	r24, r24
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	a9 01       	movw	r20, r18
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <GPIO_readPin+0x7e>
    22de:	55 95       	asr	r21
    22e0:	47 95       	ror	r20
    22e2:	8a 95       	dec	r24
    22e4:	e2 f7       	brpl	.-8      	; 0x22de <GPIO_readPin+0x7a>
    22e6:	ca 01       	movw	r24, r20
    22e8:	81 70       	andi	r24, 0x01	; 1
    22ea:	90 70       	andi	r25, 0x00	; 0
    22ec:	88 23       	and	r24, r24
    22ee:	19 f0       	breq	.+6      	; 0x22f6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	49 c0       	rjmp	.+146    	; 0x2388 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    22f6:	19 82       	std	Y+1, r1	; 0x01
    22f8:	47 c0       	rjmp	.+142    	; 0x2388 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    22fa:	e6 e3       	ldi	r30, 0x36	; 54
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	88 2f       	mov	r24, r24
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	a9 01       	movw	r20, r18
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <GPIO_readPin+0xae>
    230e:	55 95       	asr	r21
    2310:	47 95       	ror	r20
    2312:	8a 95       	dec	r24
    2314:	e2 f7       	brpl	.-8      	; 0x230e <GPIO_readPin+0xaa>
    2316:	ca 01       	movw	r24, r20
    2318:	81 70       	andi	r24, 0x01	; 1
    231a:	90 70       	andi	r25, 0x00	; 0
    231c:	88 23       	and	r24, r24
    231e:	19 f0       	breq	.+6      	; 0x2326 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	89 83       	std	Y+1, r24	; 0x01
    2324:	31 c0       	rjmp	.+98     	; 0x2388 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2326:	19 82       	std	Y+1, r1	; 0x01
    2328:	2f c0       	rjmp	.+94     	; 0x2388 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    232a:	e3 e3       	ldi	r30, 0x33	; 51
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	28 2f       	mov	r18, r24
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	88 2f       	mov	r24, r24
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	a9 01       	movw	r20, r18
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <GPIO_readPin+0xde>
    233e:	55 95       	asr	r21
    2340:	47 95       	ror	r20
    2342:	8a 95       	dec	r24
    2344:	e2 f7       	brpl	.-8      	; 0x233e <GPIO_readPin+0xda>
    2346:	ca 01       	movw	r24, r20
    2348:	81 70       	andi	r24, 0x01	; 1
    234a:	90 70       	andi	r25, 0x00	; 0
    234c:	88 23       	and	r24, r24
    234e:	19 f0       	breq	.+6      	; 0x2356 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	89 83       	std	Y+1, r24	; 0x01
    2354:	19 c0       	rjmp	.+50     	; 0x2388 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2356:	19 82       	std	Y+1, r1	; 0x01
    2358:	17 c0       	rjmp	.+46     	; 0x2388 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    235a:	e0 e3       	ldi	r30, 0x30	; 48
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	88 2f       	mov	r24, r24
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	a9 01       	movw	r20, r18
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <GPIO_readPin+0x10e>
    236e:	55 95       	asr	r21
    2370:	47 95       	ror	r20
    2372:	8a 95       	dec	r24
    2374:	e2 f7       	brpl	.-8      	; 0x236e <GPIO_readPin+0x10a>
    2376:	ca 01       	movw	r24, r20
    2378:	81 70       	andi	r24, 0x01	; 1
    237a:	90 70       	andi	r25, 0x00	; 0
    237c:	88 23       	and	r24, r24
    237e:	19 f0       	breq	.+6      	; 0x2386 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	01 c0       	rjmp	.+2      	; 0x2388 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2386:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2388:	89 81       	ldd	r24, Y+1	; 0x01
}
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <GPIO_setupPortDirection+0x6>
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <GPIO_setupPortDirection+0x8>
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	84 30       	cpi	r24, 0x04	; 4
    23ae:	90 f5       	brcc	.+100    	; 0x2414 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	28 2f       	mov	r18, r24
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	3c 83       	std	Y+4, r19	; 0x04
    23b8:	2b 83       	std	Y+3, r18	; 0x03
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	81 30       	cpi	r24, 0x01	; 1
    23c0:	91 05       	cpc	r25, r1
    23c2:	d1 f0       	breq	.+52     	; 0x23f8 <GPIO_setupPortDirection+0x5e>
    23c4:	2b 81       	ldd	r18, Y+3	; 0x03
    23c6:	3c 81       	ldd	r19, Y+4	; 0x04
    23c8:	22 30       	cpi	r18, 0x02	; 2
    23ca:	31 05       	cpc	r19, r1
    23cc:	2c f4       	brge	.+10     	; 0x23d8 <GPIO_setupPortDirection+0x3e>
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	9c 81       	ldd	r25, Y+4	; 0x04
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	61 f0       	breq	.+24     	; 0x23ee <GPIO_setupPortDirection+0x54>
    23d6:	1e c0       	rjmp	.+60     	; 0x2414 <GPIO_setupPortDirection+0x7a>
    23d8:	2b 81       	ldd	r18, Y+3	; 0x03
    23da:	3c 81       	ldd	r19, Y+4	; 0x04
    23dc:	22 30       	cpi	r18, 0x02	; 2
    23de:	31 05       	cpc	r19, r1
    23e0:	81 f0       	breq	.+32     	; 0x2402 <GPIO_setupPortDirection+0x68>
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	9c 81       	ldd	r25, Y+4	; 0x04
    23e6:	83 30       	cpi	r24, 0x03	; 3
    23e8:	91 05       	cpc	r25, r1
    23ea:	81 f0       	breq	.+32     	; 0x240c <GPIO_setupPortDirection+0x72>
    23ec:	13 c0       	rjmp	.+38     	; 0x2414 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    23ee:	ea e3       	ldi	r30, 0x3A	; 58
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	80 83       	st	Z, r24
    23f6:	0e c0       	rjmp	.+28     	; 0x2414 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    23f8:	e7 e3       	ldi	r30, 0x37	; 55
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	80 83       	st	Z, r24
    2400:	09 c0       	rjmp	.+18     	; 0x2414 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2402:	e4 e3       	ldi	r30, 0x34	; 52
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	80 83       	st	Z, r24
    240a:	04 c0       	rjmp	.+8      	; 0x2414 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    240c:	e1 e3       	ldi	r30, 0x31	; 49
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	80 83       	st	Z, r24
			break;
		}
	}
}
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	00 d0       	rcall	.+0      	; 0x2428 <GPIO_writePort+0x6>
    2428:	00 d0       	rcall	.+0      	; 0x242a <GPIO_writePort+0x8>
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	89 83       	std	Y+1, r24	; 0x01
    2430:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	84 30       	cpi	r24, 0x04	; 4
    2436:	90 f5       	brcc	.+100    	; 0x249c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	28 2f       	mov	r18, r24
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	3c 83       	std	Y+4, r19	; 0x04
    2440:	2b 83       	std	Y+3, r18	; 0x03
    2442:	8b 81       	ldd	r24, Y+3	; 0x03
    2444:	9c 81       	ldd	r25, Y+4	; 0x04
    2446:	81 30       	cpi	r24, 0x01	; 1
    2448:	91 05       	cpc	r25, r1
    244a:	d1 f0       	breq	.+52     	; 0x2480 <GPIO_writePort+0x5e>
    244c:	2b 81       	ldd	r18, Y+3	; 0x03
    244e:	3c 81       	ldd	r19, Y+4	; 0x04
    2450:	22 30       	cpi	r18, 0x02	; 2
    2452:	31 05       	cpc	r19, r1
    2454:	2c f4       	brge	.+10     	; 0x2460 <GPIO_writePort+0x3e>
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	9c 81       	ldd	r25, Y+4	; 0x04
    245a:	00 97       	sbiw	r24, 0x00	; 0
    245c:	61 f0       	breq	.+24     	; 0x2476 <GPIO_writePort+0x54>
    245e:	1e c0       	rjmp	.+60     	; 0x249c <GPIO_writePort+0x7a>
    2460:	2b 81       	ldd	r18, Y+3	; 0x03
    2462:	3c 81       	ldd	r19, Y+4	; 0x04
    2464:	22 30       	cpi	r18, 0x02	; 2
    2466:	31 05       	cpc	r19, r1
    2468:	81 f0       	breq	.+32     	; 0x248a <GPIO_writePort+0x68>
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	9c 81       	ldd	r25, Y+4	; 0x04
    246e:	83 30       	cpi	r24, 0x03	; 3
    2470:	91 05       	cpc	r25, r1
    2472:	81 f0       	breq	.+32     	; 0x2494 <GPIO_writePort+0x72>
    2474:	13 c0       	rjmp	.+38     	; 0x249c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2476:	eb e3       	ldi	r30, 0x3B	; 59
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	80 83       	st	Z, r24
    247e:	0e c0       	rjmp	.+28     	; 0x249c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2480:	e8 e3       	ldi	r30, 0x38	; 56
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	8a 81       	ldd	r24, Y+2	; 0x02
    2486:	80 83       	st	Z, r24
    2488:	09 c0       	rjmp	.+18     	; 0x249c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    248a:	e5 e3       	ldi	r30, 0x35	; 53
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	8a 81       	ldd	r24, Y+2	; 0x02
    2490:	80 83       	st	Z, r24
    2492:	04 c0       	rjmp	.+8      	; 0x249c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2494:	e2 e3       	ldi	r30, 0x32	; 50
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	8a 81       	ldd	r24, Y+2	; 0x02
    249a:	80 83       	st	Z, r24
			break;
		}
	}
}
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	00 d0       	rcall	.+0      	; 0x24b0 <GPIO_readPort+0x6>
    24b0:	00 d0       	rcall	.+0      	; 0x24b2 <GPIO_readPort+0x8>
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
    24b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    24b8:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	84 30       	cpi	r24, 0x04	; 4
    24be:	90 f5       	brcc	.+100    	; 0x2524 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    24c0:	8a 81       	ldd	r24, Y+2	; 0x02
    24c2:	28 2f       	mov	r18, r24
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	3c 83       	std	Y+4, r19	; 0x04
    24c8:	2b 83       	std	Y+3, r18	; 0x03
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	9c 81       	ldd	r25, Y+4	; 0x04
    24ce:	81 30       	cpi	r24, 0x01	; 1
    24d0:	91 05       	cpc	r25, r1
    24d2:	d1 f0       	breq	.+52     	; 0x2508 <GPIO_readPort+0x5e>
    24d4:	2b 81       	ldd	r18, Y+3	; 0x03
    24d6:	3c 81       	ldd	r19, Y+4	; 0x04
    24d8:	22 30       	cpi	r18, 0x02	; 2
    24da:	31 05       	cpc	r19, r1
    24dc:	2c f4       	brge	.+10     	; 0x24e8 <GPIO_readPort+0x3e>
    24de:	8b 81       	ldd	r24, Y+3	; 0x03
    24e0:	9c 81       	ldd	r25, Y+4	; 0x04
    24e2:	00 97       	sbiw	r24, 0x00	; 0
    24e4:	61 f0       	breq	.+24     	; 0x24fe <GPIO_readPort+0x54>
    24e6:	1e c0       	rjmp	.+60     	; 0x2524 <GPIO_readPort+0x7a>
    24e8:	2b 81       	ldd	r18, Y+3	; 0x03
    24ea:	3c 81       	ldd	r19, Y+4	; 0x04
    24ec:	22 30       	cpi	r18, 0x02	; 2
    24ee:	31 05       	cpc	r19, r1
    24f0:	81 f0       	breq	.+32     	; 0x2512 <GPIO_readPort+0x68>
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	9c 81       	ldd	r25, Y+4	; 0x04
    24f6:	83 30       	cpi	r24, 0x03	; 3
    24f8:	91 05       	cpc	r25, r1
    24fa:	81 f0       	breq	.+32     	; 0x251c <GPIO_readPort+0x72>
    24fc:	13 c0       	rjmp	.+38     	; 0x2524 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    24fe:	e9 e3       	ldi	r30, 0x39	; 57
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	89 83       	std	Y+1, r24	; 0x01
    2506:	0e c0       	rjmp	.+28     	; 0x2524 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2508:	e6 e3       	ldi	r30, 0x36	; 54
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	89 83       	std	Y+1, r24	; 0x01
    2510:	09 c0       	rjmp	.+18     	; 0x2524 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2512:	e3 e3       	ldi	r30, 0x33	; 51
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	89 83       	std	Y+1, r24	; 0x01
    251a:	04 c0       	rjmp	.+8      	; 0x2524 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    251c:	e0 e3       	ldi	r30, 0x30	; 48
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2524:	89 81       	ldd	r24, Y+1	; 0x01
}
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <__vector_7>:
#include <avr/interrupt.h>
static volatile void(*g_callback_ptr) (void)=NULL_PTR;

/* Compare mode timer ISR to call the callback function */
ISR(TIMER1_COMPA_vect)
{
    2534:	1f 92       	push	r1
    2536:	0f 92       	push	r0
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	0f 92       	push	r0
    253c:	11 24       	eor	r1, r1
    253e:	2f 93       	push	r18
    2540:	3f 93       	push	r19
    2542:	4f 93       	push	r20
    2544:	5f 93       	push	r21
    2546:	6f 93       	push	r22
    2548:	7f 93       	push	r23
    254a:	8f 93       	push	r24
    254c:	9f 93       	push	r25
    254e:	af 93       	push	r26
    2550:	bf 93       	push	r27
    2552:	ef 93       	push	r30
    2554:	ff 93       	push	r31
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
	if(g_callback_ptr != NULL_PTR)
    255e:	80 91 70 00 	lds	r24, 0x0070
    2562:	90 91 71 00 	lds	r25, 0x0071
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	29 f0       	breq	.+10     	; 0x2574 <__vector_7+0x40>
	{
		(*g_callback_ptr)();
    256a:	e0 91 70 00 	lds	r30, 0x0070
    256e:	f0 91 71 00 	lds	r31, 0x0071
    2572:	09 95       	icall
	}
}
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	ff 91       	pop	r31
    257a:	ef 91       	pop	r30
    257c:	bf 91       	pop	r27
    257e:	af 91       	pop	r26
    2580:	9f 91       	pop	r25
    2582:	8f 91       	pop	r24
    2584:	7f 91       	pop	r23
    2586:	6f 91       	pop	r22
    2588:	5f 91       	pop	r21
    258a:	4f 91       	pop	r20
    258c:	3f 91       	pop	r19
    258e:	2f 91       	pop	r18
    2590:	0f 90       	pop	r0
    2592:	0f be       	out	0x3f, r0	; 63
    2594:	0f 90       	pop	r0
    2596:	1f 90       	pop	r1
    2598:	18 95       	reti

0000259a <__vector_9>:
/* Overflow mode timer ISR to call the callback function */
ISR(TIMER1_OVF_vect)
{
    259a:	1f 92       	push	r1
    259c:	0f 92       	push	r0
    259e:	0f b6       	in	r0, 0x3f	; 63
    25a0:	0f 92       	push	r0
    25a2:	11 24       	eor	r1, r1
    25a4:	2f 93       	push	r18
    25a6:	3f 93       	push	r19
    25a8:	4f 93       	push	r20
    25aa:	5f 93       	push	r21
    25ac:	6f 93       	push	r22
    25ae:	7f 93       	push	r23
    25b0:	8f 93       	push	r24
    25b2:	9f 93       	push	r25
    25b4:	af 93       	push	r26
    25b6:	bf 93       	push	r27
    25b8:	ef 93       	push	r30
    25ba:	ff 93       	push	r31
    25bc:	df 93       	push	r29
    25be:	cf 93       	push	r28
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
	if(g_callback_ptr != NULL_PTR)
    25c4:	80 91 70 00 	lds	r24, 0x0070
    25c8:	90 91 71 00 	lds	r25, 0x0071
    25cc:	00 97       	sbiw	r24, 0x00	; 0
    25ce:	29 f0       	breq	.+10     	; 0x25da <__vector_9+0x40>
	{
		(*g_callback_ptr)();
    25d0:	e0 91 70 00 	lds	r30, 0x0070
    25d4:	f0 91 71 00 	lds	r31, 0x0071
    25d8:	09 95       	icall
	}
}
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	ff 91       	pop	r31
    25e0:	ef 91       	pop	r30
    25e2:	bf 91       	pop	r27
    25e4:	af 91       	pop	r26
    25e6:	9f 91       	pop	r25
    25e8:	8f 91       	pop	r24
    25ea:	7f 91       	pop	r23
    25ec:	6f 91       	pop	r22
    25ee:	5f 91       	pop	r21
    25f0:	4f 91       	pop	r20
    25f2:	3f 91       	pop	r19
    25f4:	2f 91       	pop	r18
    25f6:	0f 90       	pop	r0
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	0f 90       	pop	r0
    25fc:	1f 90       	pop	r1
    25fe:	18 95       	reti

00002600 <Timer1_init>:
/* Timer initialization function */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	00 d0       	rcall	.+0      	; 0x2606 <Timer1_init+0x6>
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	9a 83       	std	Y+2, r25	; 0x02
    260c:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Config_Ptr->initial_value;
    260e:	ac e4       	ldi	r26, 0x4C	; 76
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	e9 81       	ldd	r30, Y+1	; 0x01
    2614:	fa 81       	ldd	r31, Y+2	; 0x02
    2616:	82 81       	ldd	r24, Z+2	; 0x02
    2618:	93 81       	ldd	r25, Z+3	; 0x03
    261a:	11 96       	adiw	r26, 0x01	; 1
    261c:	9c 93       	st	X, r25
    261e:	8e 93       	st	-X, r24
	OCR1A=Config_Ptr->compare_value;
    2620:	aa e4       	ldi	r26, 0x4A	; 74
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	e9 81       	ldd	r30, Y+1	; 0x01
    2626:	fa 81       	ldd	r31, Y+2	; 0x02
    2628:	84 81       	ldd	r24, Z+4	; 0x04
    262a:	95 81       	ldd	r25, Z+5	; 0x05
    262c:	11 96       	adiw	r26, 0x01	; 1
    262e:	9c 93       	st	X, r25
    2630:	8e 93       	st	-X, r24
	TCCR1A= (1<<FOC1A)|(1<<FOC1B);
    2632:	ef e4       	ldi	r30, 0x4F	; 79
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	8c e0       	ldi	r24, 0x0C	; 12
    2638:	80 83       	st	Z, r24
	TCCR1B= (0xFF & Config_Ptr->prescaler);
    263a:	ae e4       	ldi	r26, 0x4E	; 78
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	e9 81       	ldd	r30, Y+1	; 0x01
    2640:	fa 81       	ldd	r31, Y+2	; 0x02
    2642:	80 81       	ld	r24, Z
    2644:	8c 93       	st	X, r24
	if(Config_Ptr->mode==NORMAL)
    2646:	e9 81       	ldd	r30, Y+1	; 0x01
    2648:	fa 81       	ldd	r31, Y+2	; 0x02
    264a:	81 81       	ldd	r24, Z+1	; 0x01
    264c:	88 23       	and	r24, r24
    264e:	91 f4       	brne	.+36     	; 0x2674 <Timer1_init+0x74>
	{
		TCCR1A|= (Config_Ptr->mode);
    2650:	af e4       	ldi	r26, 0x4F	; 79
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	ef e4       	ldi	r30, 0x4F	; 79
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	90 81       	ld	r25, Z
    265a:	e9 81       	ldd	r30, Y+1	; 0x01
    265c:	fa 81       	ldd	r31, Y+2	; 0x02
    265e:	81 81       	ldd	r24, Z+1	; 0x01
    2660:	89 2b       	or	r24, r25
    2662:	8c 93       	st	X, r24
		TIMSK|= (1<<TOIE1);
    2664:	a9 e5       	ldi	r26, 0x59	; 89
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	e9 e5       	ldi	r30, 0x59	; 89
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	84 60       	ori	r24, 0x04	; 4
    2670:	8c 93       	st	X, r24
    2672:	13 c0       	rjmp	.+38     	; 0x269a <Timer1_init+0x9a>
	}
	else if(Config_Ptr->mode==CTC)
    2674:	e9 81       	ldd	r30, Y+1	; 0x01
    2676:	fa 81       	ldd	r31, Y+2	; 0x02
    2678:	81 81       	ldd	r24, Z+1	; 0x01
    267a:	84 30       	cpi	r24, 0x04	; 4
    267c:	71 f4       	brne	.+28     	; 0x269a <Timer1_init+0x9a>
	{
		TCCR1B|=(1<<WGM12);
    267e:	ae e4       	ldi	r26, 0x4E	; 78
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	ee e4       	ldi	r30, 0x4E	; 78
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	88 60       	ori	r24, 0x08	; 8
    268a:	8c 93       	st	X, r24
		TIMSK|= (1<<OCIE1A);
    268c:	a9 e5       	ldi	r26, 0x59	; 89
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	e9 e5       	ldi	r30, 0x59	; 89
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	80 61       	ori	r24, 0x10	; 16
    2698:	8c 93       	st	X, r24
	}
}
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <Timer1_deInit>:
/* Timer deinitialization function */
void Timer1_deInit(void)
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
	TCCR1B= NO_CLK;
    26ac:	ee e4       	ldi	r30, 0x4E	; 78
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	10 82       	st	Z, r1
	TCNT1=0;
    26b2:	ec e4       	ldi	r30, 0x4C	; 76
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	11 82       	std	Z+1, r1	; 0x01
    26b8:	10 82       	st	Z, r1
	OCR1A=0;
    26ba:	ea e4       	ldi	r30, 0x4A	; 74
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	11 82       	std	Z+1, r1	; 0x01
    26c0:	10 82       	st	Z, r1
}
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	00 d0       	rcall	.+0      	; 0x26ce <Timer1_setCallBack+0x6>
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    26d2:	9a 83       	std	Y+2, r25	; 0x02
    26d4:	89 83       	std	Y+1, r24	; 0x01
	g_callback_ptr=a_ptr;
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	9a 81       	ldd	r25, Y+2	; 0x02
    26da:	90 93 71 00 	sts	0x0071, r25
    26de:	80 93 70 00 	sts	0x0070, r24
}
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <TWI_init>:
#include "common_macros.h"
#include <avr/io.h>


void TWI_init(uint8 configurations)
{
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	0f 92       	push	r0
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	89 83       	std	Y+1, r24	; 0x01

#if(F_CPUU==8000000)
	if (configurations==BAUD_400Kb)
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	81 30       	cpi	r24, 0x01	; 1
    26fc:	41 f4       	brne	.+16     	; 0x270e <TWI_init+0x22>
	{
		TWBR=0x02;
    26fe:	e0 e2       	ldi	r30, 0x20	; 32
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	82 e0       	ldi	r24, 0x02	; 2
    2704:	80 83       	st	Z, r24
		TWSR=0x00;
    2706:	e1 e2       	ldi	r30, 0x21	; 33
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	10 82       	st	Z, r1
    270c:	0a c0       	rjmp	.+20     	; 0x2722 <TWI_init+0x36>
	}
	else if(configurations==BAUD_100Kb)
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	88 23       	and	r24, r24
    2712:	39 f4       	brne	.+14     	; 0x2722 <TWI_init+0x36>
	{
		TWBR=32;
    2714:	e0 e2       	ldi	r30, 0x20	; 32
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 e2       	ldi	r24, 0x20	; 32
    271a:	80 83       	st	Z, r24
		TWSR=0;
    271c:	e1 e2       	ldi	r30, 0x21	; 33
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	10 82       	st	Z, r1
		}


#endif

    TWAR = 0b00000010; // my address = 0x01 :)
    2722:	e2 e2       	ldi	r30, 0x22	; 34
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	82 e0       	ldi	r24, 0x02	; 2
    2728:	80 83       	st	Z, r24

    TWCR = (1<<TWEN); /* enable TWI */
    272a:	e6 e5       	ldi	r30, 0x56	; 86
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	84 e0       	ldi	r24, 0x04	; 4
    2730:	80 83       	st	Z, r24
}
    2732:	0f 90       	pop	r0
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <TWI_start>:

void TWI_start(void)
{
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
	 /*
		 * Clear the TWINT flag before sending the start bit TWINT=1
		 * send the start bit by TWSTA=1
		 * Enable TWI Module TWEN=1
		 */
	    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2742:	e6 e5       	ldi	r30, 0x56	; 86
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	84 ea       	ldi	r24, 0xA4	; 164
    2748:	80 83       	st	Z, r24

	    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	    while(BIT_IS_CLEAR(TWCR,TWINT));
    274a:	e6 e5       	ldi	r30, 0x56	; 86
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	88 23       	and	r24, r24
    2752:	dc f7       	brge	.-10     	; 0x274a <TWI_start+0x10>

}
    2754:	cf 91       	pop	r28
    2756:	df 91       	pop	r29
    2758:	08 95       	ret

0000275a <TWI_stop>:

void TWI_stop(void)
{
    275a:	df 93       	push	r29
    275c:	cf 93       	push	r28
    275e:	cd b7       	in	r28, 0x3d	; 61
    2760:	de b7       	in	r29, 0x3e	; 62

	 TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2762:	e6 e5       	ldi	r30, 0x56	; 86
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	84 e9       	ldi	r24, 0x94	; 148
    2768:	80 83       	st	Z, r24

}
    276a:	cf 91       	pop	r28
    276c:	df 91       	pop	r29
    276e:	08 95       	ret

00002770 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2770:	df 93       	push	r29
    2772:	cf 93       	push	r28
    2774:	0f 92       	push	r0
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
    277a:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
    TWDR = data;
    277c:	e3 e2       	ldi	r30, 0x23	; 35
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	80 83       	st	Z, r24
	    /*
		 * Clear the TWINT flag before sending the data TWINT=1
		 * Enable TWI Module TWEN=1
		 */
	    TWCR = (1 << TWINT) | (1 << TWEN);
    2784:	e6 e5       	ldi	r30, 0x56	; 86
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	84 e8       	ldi	r24, 0x84	; 132
    278a:	80 83       	st	Z, r24
	    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	    while(BIT_IS_CLEAR(TWCR,TWINT));
    278c:	e6 e5       	ldi	r30, 0x56	; 86
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	80 81       	ld	r24, Z
    2792:	88 23       	and	r24, r24
    2794:	dc f7       	brge	.-10     	; 0x278c <TWI_writeByte+0x1c>
}
    2796:	0f 90       	pop	r0
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    27a6:	e6 e5       	ldi	r30, 0x56	; 86
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	84 ec       	ldi	r24, 0xC4	; 196
    27ac:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    27ae:	e6 e5       	ldi	r30, 0x56	; 86
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	88 23       	and	r24, r24
    27b6:	dc f7       	brge	.-10     	; 0x27ae <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    27b8:	e3 e2       	ldi	r30, 0x23	; 35
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z

}
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	08 95       	ret

000027c4 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1 << TWINT) | (1 << TWEN);
    27cc:	e6 e5       	ldi	r30, 0x56	; 86
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	84 e8       	ldi	r24, 0x84	; 132
    27d2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    27d4:	e6 e5       	ldi	r30, 0x56	; 86
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	88 23       	and	r24, r24
    27dc:	dc f7       	brge	.-10     	; 0x27d4 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    27de:	e3 e2       	ldi	r30, 0x23	; 35
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z

}
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	0f 92       	push	r0
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62

    uint8 status;
    status = TWSR & 0xF8;/*getting last 5 bits*/
    27f4:	e1 e2       	ldi	r30, 0x21	; 33
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	80 81       	ld	r24, Z
    27fa:	88 7f       	andi	r24, 0xF8	; 248
    27fc:	89 83       	std	Y+1, r24	; 0x01
    return status;
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2800:	0f 90       	pop	r0
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	08 95       	ret

00002808 <UART_init>:


uint8 data_received;

void UART_init(UART_ConfigType* configurations)
{
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	00 d0       	rcall	.+0      	; 0x280e <UART_init+0x6>
    280e:	00 d0       	rcall	.+0      	; 0x2810 <UART_init+0x8>
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
    2814:	9c 83       	std	Y+4, r25	; 0x04
    2816:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value=0;
    2818:	1a 82       	std	Y+2, r1	; 0x02
    281a:	19 82       	std	Y+1, r1	; 0x01
	SREG=(1<<7);
    281c:	ef e5       	ldi	r30, 0x5F	; 95
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 e8       	ldi	r24, 0x80	; 128
    2822:	80 83       	st	Z, r24
	UCSRA=(1<<U2X);	/*double transmission speed*/
    2824:	eb e2       	ldi	r30, 0x2B	; 43
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	82 e0       	ldi	r24, 0x02	; 2
    282a:	80 83       	st	Z, r24
	/*RXCIE -->when receiving a byte is complete an interrupt happens that return the byte
	 * RXEN--->receiver enable
	 * TXEN---> transmitter enable
	 * */
	UCSRB|=(1<<receiver_enable)|(1<<transmitter_enable);
    282c:	aa e2       	ldi	r26, 0x2A	; 42
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	ea e2       	ldi	r30, 0x2A	; 42
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	88 61       	ori	r24, 0x18	; 24
    2838:	8c 93       	st	X, r24
	/*
	 * this sets the character size of the data
	 * */
	UCSRC=(1<<URSEL)|((configurations->ch_size)<<UCSZ0)|((configurations->parity_type)<<UPM0);
    283a:	a0 e4       	ldi	r26, 0x40	; 64
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	eb 81       	ldd	r30, Y+3	; 0x03
    2840:	fc 81       	ldd	r31, Y+4	; 0x04
    2842:	83 81       	ldd	r24, Z+3	; 0x03
    2844:	88 2f       	mov	r24, r24
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	88 0f       	add	r24, r24
    284a:	99 1f       	adc	r25, r25
    284c:	28 2f       	mov	r18, r24
    284e:	20 68       	ori	r18, 0x80	; 128
    2850:	eb 81       	ldd	r30, Y+3	; 0x03
    2852:	fc 81       	ldd	r31, Y+4	; 0x04
    2854:	82 81       	ldd	r24, Z+2	; 0x02
    2856:	88 2f       	mov	r24, r24
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	82 95       	swap	r24
    285c:	92 95       	swap	r25
    285e:	90 7f       	andi	r25, 0xF0	; 240
    2860:	98 27       	eor	r25, r24
    2862:	80 7f       	andi	r24, 0xF0	; 240
    2864:	98 27       	eor	r25, r24
    2866:	82 2b       	or	r24, r18
    2868:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((configurations->baud_rate) * 8UL))) - 1);
    286a:	eb 81       	ldd	r30, Y+3	; 0x03
    286c:	fc 81       	ldd	r31, Y+4	; 0x04
    286e:	80 81       	ld	r24, Z
    2870:	91 81       	ldd	r25, Z+1	; 0x01
    2872:	cc 01       	movw	r24, r24
    2874:	a0 e0       	ldi	r26, 0x00	; 0
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	88 0f       	add	r24, r24
    287a:	99 1f       	adc	r25, r25
    287c:	aa 1f       	adc	r26, r26
    287e:	bb 1f       	adc	r27, r27
    2880:	88 0f       	add	r24, r24
    2882:	99 1f       	adc	r25, r25
    2884:	aa 1f       	adc	r26, r26
    2886:	bb 1f       	adc	r27, r27
    2888:	88 0f       	add	r24, r24
    288a:	99 1f       	adc	r25, r25
    288c:	aa 1f       	adc	r26, r26
    288e:	bb 1f       	adc	r27, r27
    2890:	9c 01       	movw	r18, r24
    2892:	ad 01       	movw	r20, r26
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	92 e1       	ldi	r25, 0x12	; 18
    2898:	aa e7       	ldi	r26, 0x7A	; 122
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	bc 01       	movw	r22, r24
    289e:	cd 01       	movw	r24, r26
    28a0:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <__udivmodsi4>
    28a4:	da 01       	movw	r26, r20
    28a6:	c9 01       	movw	r24, r18
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	9a 83       	std	Y+2, r25	; 0x02
    28ac:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    28ae:	e0 e4       	ldi	r30, 0x40	; 64
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	9a 81       	ldd	r25, Y+2	; 0x02
    28b6:	89 2f       	mov	r24, r25
    28b8:	99 27       	eor	r25, r25
    28ba:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    28bc:	e9 e2       	ldi	r30, 0x29	; 41
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	80 83       	st	Z, r24



}
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	08 95       	ret

000028d2 <UART_sendByte>:

void UART_sendByte(uint8 data)
{
    28d2:	df 93       	push	r29
    28d4:	cf 93       	push	r28
    28d6:	0f 92       	push	r0
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    28de:	eb e2       	ldi	r30, 0x2B	; 43
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	88 2f       	mov	r24, r24
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	80 72       	andi	r24, 0x20	; 32
    28ea:	90 70       	andi	r25, 0x00	; 0
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	b9 f3       	breq	.-18     	; 0x28de <UART_sendByte+0xc>
	UDR=data;
    28f0:	ec e2       	ldi	r30, 0x2C	; 44
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
    28f6:	80 83       	st	Z, r24

}
    28f8:	0f 90       	pop	r0
    28fa:	cf 91       	pop	r28
    28fc:	df 91       	pop	r29
    28fe:	08 95       	ret

00002900 <UART_receiveByte>:
uint8 UART_receiveByte()
{
    2900:	df 93       	push	r29
    2902:	cf 93       	push	r28
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2908:	eb e2       	ldi	r30, 0x2B	; 43
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	88 23       	and	r24, r24
    2910:	dc f7       	brge	.-10     	; 0x2908 <UART_receiveByte+0x8>
	return UDR;
    2912:	ec e2       	ldi	r30, 0x2C	; 44
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
}
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	08 95       	ret

0000291e <UART_sendString>:
void UART_sendString(const char*str)
{
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	00 d0       	rcall	.+0      	; 0x2924 <UART_sendString+0x6>
    2924:	0f 92       	push	r0
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	9b 83       	std	Y+3, r25	; 0x03
    292c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    292e:	19 82       	std	Y+1, r1	; 0x01
    2930:	0e c0       	rjmp	.+28     	; 0x294e <UART_sendString+0x30>

		/* Send the whole string */
		while(str[i] != '\0')
		{
			UART_sendByte(str[i]);
    2932:	89 81       	ldd	r24, Y+1	; 0x01
    2934:	28 2f       	mov	r18, r24
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	8a 81       	ldd	r24, Y+2	; 0x02
    293a:	9b 81       	ldd	r25, Y+3	; 0x03
    293c:	fc 01       	movw	r30, r24
    293e:	e2 0f       	add	r30, r18
    2940:	f3 1f       	adc	r31, r19
    2942:	80 81       	ld	r24, Z
    2944:	0e 94 69 14 	call	0x28d2	; 0x28d2 <UART_sendByte>
			i++;
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	8f 5f       	subi	r24, 0xFF	; 255
    294c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const char*str)
{
	uint8 i = 0;

		/* Send the whole string */
		while(str[i] != '\0')
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	28 2f       	mov	r18, r24
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	8a 81       	ldd	r24, Y+2	; 0x02
    2956:	9b 81       	ldd	r25, Y+3	; 0x03
    2958:	fc 01       	movw	r30, r24
    295a:	e2 0f       	add	r30, r18
    295c:	f3 1f       	adc	r31, r19
    295e:	80 81       	ld	r24, Z
    2960:	88 23       	and	r24, r24
    2962:	39 f7       	brne	.-50     	; 0x2932 <UART_sendString+0x14>
		{
			UART_sendByte(str[i]);
			i++;
		}

}
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	08 95       	ret

00002970 <UART_receiveString>:
void UART_receiveString(char *str)
{
    2970:	0f 93       	push	r16
    2972:	1f 93       	push	r17
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	00 d0       	rcall	.+0      	; 0x297a <UART_receiveString+0xa>
    297a:	0f 92       	push	r0
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
    2980:	9b 83       	std	Y+3, r25	; 0x03
    2982:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2984:	19 82       	std	Y+1, r1	; 0x01
	str[i]=UART_receiveByte();
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	28 2f       	mov	r18, r24
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	8a 81       	ldd	r24, Y+2	; 0x02
    298e:	9b 81       	ldd	r25, Y+3	; 0x03
    2990:	8c 01       	movw	r16, r24
    2992:	02 0f       	add	r16, r18
    2994:	13 1f       	adc	r17, r19
    2996:	0e 94 80 14 	call	0x2900	; 0x2900 <UART_receiveByte>
    299a:	f8 01       	movw	r30, r16
    299c:	80 83       	st	Z, r24
    299e:	0f c0       	rjmp	.+30     	; 0x29be <UART_receiveString+0x4e>
	while(str[i]!=string_stop)
	{
		i++;
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	8f 5f       	subi	r24, 0xFF	; 255
    29a4:	89 83       	std	Y+1, r24	; 0x01
		str[i]=UART_receiveByte();
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	28 2f       	mov	r18, r24
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	8a 81       	ldd	r24, Y+2	; 0x02
    29ae:	9b 81       	ldd	r25, Y+3	; 0x03
    29b0:	8c 01       	movw	r16, r24
    29b2:	02 0f       	add	r16, r18
    29b4:	13 1f       	adc	r17, r19
    29b6:	0e 94 80 14 	call	0x2900	; 0x2900 <UART_receiveByte>
    29ba:	f8 01       	movw	r30, r16
    29bc:	80 83       	st	Z, r24
}
void UART_receiveString(char *str)
{
	uint8 i=0;
	str[i]=UART_receiveByte();
	while(str[i]!=string_stop)
    29be:	89 81       	ldd	r24, Y+1	; 0x01
    29c0:	28 2f       	mov	r18, r24
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	8a 81       	ldd	r24, Y+2	; 0x02
    29c6:	9b 81       	ldd	r25, Y+3	; 0x03
    29c8:	fc 01       	movw	r30, r24
    29ca:	e2 0f       	add	r30, r18
    29cc:	f3 1f       	adc	r31, r19
    29ce:	80 81       	ld	r24, Z
    29d0:	83 32       	cpi	r24, 0x23	; 35
    29d2:	31 f7       	brne	.-52     	; 0x29a0 <UART_receiveString+0x30>
	{
		i++;
		str[i]=UART_receiveByte();
	}
	str[i]='\0';
    29d4:	89 81       	ldd	r24, Y+1	; 0x01
    29d6:	28 2f       	mov	r18, r24
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	8a 81       	ldd	r24, Y+2	; 0x02
    29dc:	9b 81       	ldd	r25, Y+3	; 0x03
    29de:	fc 01       	movw	r30, r24
    29e0:	e2 0f       	add	r30, r18
    29e2:	f3 1f       	adc	r31, r19
    29e4:	10 82       	st	Z, r1
}
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	1f 91       	pop	r17
    29f2:	0f 91       	pop	r16
    29f4:	08 95       	ret

000029f6 <__udivmodsi4>:
    29f6:	a1 e2       	ldi	r26, 0x21	; 33
    29f8:	1a 2e       	mov	r1, r26
    29fa:	aa 1b       	sub	r26, r26
    29fc:	bb 1b       	sub	r27, r27
    29fe:	fd 01       	movw	r30, r26
    2a00:	0d c0       	rjmp	.+26     	; 0x2a1c <__udivmodsi4_ep>

00002a02 <__udivmodsi4_loop>:
    2a02:	aa 1f       	adc	r26, r26
    2a04:	bb 1f       	adc	r27, r27
    2a06:	ee 1f       	adc	r30, r30
    2a08:	ff 1f       	adc	r31, r31
    2a0a:	a2 17       	cp	r26, r18
    2a0c:	b3 07       	cpc	r27, r19
    2a0e:	e4 07       	cpc	r30, r20
    2a10:	f5 07       	cpc	r31, r21
    2a12:	20 f0       	brcs	.+8      	; 0x2a1c <__udivmodsi4_ep>
    2a14:	a2 1b       	sub	r26, r18
    2a16:	b3 0b       	sbc	r27, r19
    2a18:	e4 0b       	sbc	r30, r20
    2a1a:	f5 0b       	sbc	r31, r21

00002a1c <__udivmodsi4_ep>:
    2a1c:	66 1f       	adc	r22, r22
    2a1e:	77 1f       	adc	r23, r23
    2a20:	88 1f       	adc	r24, r24
    2a22:	99 1f       	adc	r25, r25
    2a24:	1a 94       	dec	r1
    2a26:	69 f7       	brne	.-38     	; 0x2a02 <__udivmodsi4_loop>
    2a28:	60 95       	com	r22
    2a2a:	70 95       	com	r23
    2a2c:	80 95       	com	r24
    2a2e:	90 95       	com	r25
    2a30:	9b 01       	movw	r18, r22
    2a32:	ac 01       	movw	r20, r24
    2a34:	bd 01       	movw	r22, r26
    2a36:	cf 01       	movw	r24, r30
    2a38:	08 95       	ret

00002a3a <__prologue_saves__>:
    2a3a:	2f 92       	push	r2
    2a3c:	3f 92       	push	r3
    2a3e:	4f 92       	push	r4
    2a40:	5f 92       	push	r5
    2a42:	6f 92       	push	r6
    2a44:	7f 92       	push	r7
    2a46:	8f 92       	push	r8
    2a48:	9f 92       	push	r9
    2a4a:	af 92       	push	r10
    2a4c:	bf 92       	push	r11
    2a4e:	cf 92       	push	r12
    2a50:	df 92       	push	r13
    2a52:	ef 92       	push	r14
    2a54:	ff 92       	push	r15
    2a56:	0f 93       	push	r16
    2a58:	1f 93       	push	r17
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	ca 1b       	sub	r28, r26
    2a64:	db 0b       	sbc	r29, r27
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	f8 94       	cli
    2a6a:	de bf       	out	0x3e, r29	; 62
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	cd bf       	out	0x3d, r28	; 61
    2a70:	09 94       	ijmp

00002a72 <__epilogue_restores__>:
    2a72:	2a 88       	ldd	r2, Y+18	; 0x12
    2a74:	39 88       	ldd	r3, Y+17	; 0x11
    2a76:	48 88       	ldd	r4, Y+16	; 0x10
    2a78:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a7a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a7c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a7e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a80:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a82:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a84:	b9 84       	ldd	r11, Y+9	; 0x09
    2a86:	c8 84       	ldd	r12, Y+8	; 0x08
    2a88:	df 80       	ldd	r13, Y+7	; 0x07
    2a8a:	ee 80       	ldd	r14, Y+6	; 0x06
    2a8c:	fd 80       	ldd	r15, Y+5	; 0x05
    2a8e:	0c 81       	ldd	r16, Y+4	; 0x04
    2a90:	1b 81       	ldd	r17, Y+3	; 0x03
    2a92:	aa 81       	ldd	r26, Y+2	; 0x02
    2a94:	b9 81       	ldd	r27, Y+1	; 0x01
    2a96:	ce 0f       	add	r28, r30
    2a98:	d1 1d       	adc	r29, r1
    2a9a:	0f b6       	in	r0, 0x3f	; 63
    2a9c:	f8 94       	cli
    2a9e:	de bf       	out	0x3e, r29	; 62
    2aa0:	0f be       	out	0x3f, r0	; 63
    2aa2:	cd bf       	out	0x3d, r28	; 61
    2aa4:	ed 01       	movw	r28, r26
    2aa6:	08 95       	ret

00002aa8 <_exit>:
    2aa8:	f8 94       	cli

00002aaa <__stop_program>:
    2aaa:	ff cf       	rjmp	.-2      	; 0x2aaa <__stop_program>
